dnl Process this file with autoconf to produce a configure script.
AC_REVISION ($Revision$)
AC_INIT(Helper.pm)
VER=1.3.0
REL=1
AC_SUBST(VER)
AC_SUBST(REL)
PACKAGE_VERSION="${VER}"
AC_SUBST(PACKAGE_VERSION)
PACKAGE_RELEASE="${REL}"
AC_SUBST(PACKAGE_RELEASE)
AM_INIT_AUTOMAKE(nagios-plugins,${PACKAGE_VERSION})
AM_CONFIG_HEADER(plugins/config.h plugins/common.h plugins/version.h plugins/netutils.h plugins/utils.h plugins/popen.h)
AC_CANONICAL_HOST

AC_PREFIX_DEFAULT(/usr/local/nagios)

dnl Figure out how to invoke "install" and what install options to use.

AC_PROG_INSTALL
AC_SUBST(INSTALL)

AC_PROG_CC
AC_PROG_CPP
AC_PROG_GCC_TRADITIONAL
AC_PROG_RANLIB
AC_AIX
AC_MINIX

AC_PROG_MAKE_SET
AC_PROG_AWK

# Check for SunOS statfs brokenness wrt partitions 2GB and larger.
# If <sys/vfs.h> exists and struct statfs has a member named f_spare,
# enable the work-around code in fsusage.c.
AC_MSG_CHECKING([for statfs that truncates block counts])
AC_CACHE_VAL(fu_cv_sys_truncating_statfs,
[AC_TRY_COMPILE([
#if !defined(sun) && !defined(__sun)
choke -- this is a workaround for a Sun-specific problem
#endif
#include <sys/types.h>
#include <sys/vfs.h>],
[struct statfs t; long c = *(t.f_spare);],
fu_cv_sys_truncating_statfs=yes
AC_MSG_RESULT(yes),
fu_cv_sys_truncating_statfs=no
AC_MSG_RESULT(no),
)])
if test $fu_cv_sys_truncating_statfs = yes; then
  AC_DEFINE(STATFS_TRUNCATES_BLOCK_COUNTS, 1,
[  Define if the block counts reported by statfs may be truncated to 2GB
   and the correct values may be stored in the f_spare array.
   (SunOS 4.1.2, 4.1.3, and 4.1.3_U1 are reported to have this problem.
   SunOS 4.1.1 seems not to be affected.)])
fi

saved_srcdir=$srcdir
srcdir=$srcdir/lib
test -f $srcdir/getloadavg.c \
  || AC_MSG_ERROR([getloadavg.c is not in $srcdir])
AC_FUNC_GETLOADAVG
srcdir=$saved_srcdir

ifdef([AC_FUNC_STRTOD],[AC_FUNC_STRTOD],[AM_FUNC_STRTOD])
dnl AM_WITH_REGEX
AC_PROG_RANLIB

AC_PATH_PROG(ACLOCAL,aclocal)
AC_PATH_PROG(AUTOMAKE,automake)
AC_PATH_PROG(AUTOCONF,autoconf)
AC_PATH_PROG(AUTOHEADER,autoheader)

PLUGIN_TEST=`echo $srcdir/plugins/t/*.t|sed -e 's,\.*/plugins/,,g'`
AC_SUBST(PLUGIN_TEST)dnl

SCRIPT_TEST=`echo $srcdir/plugins-scripts/t/*.t|sed -e 's,\.*/plugins-scripts/,,g'`
AC_SUBST(SCRIPT_TEST)dnl

WARRANTY="The nagios plugins come with ABSOLUTELY NO WARRANTY. You may redistribute\ncopies of the plugins under the terms of the GNU General Public License.\nFor more information about these matters, see the file named COPYING.\n"
AC_SUBST(WARRANTY)

SUPPORT="Send email to nagios-users@lists.sourceforge.net if you have questions\nregarding use of this software. To submit patches or suggest improvements,\nsend email to nagiosplug-devel@lists.sourceforge.net\n"
AC_SUBST(SUPPORT)

dnl CGIURL has changed for Nagios with 1.0 beta
AC_ARG_WITH(cgiurl,
	ACX_HELP_STRING([--with-cgiurl=DIR],
		[sets URL for cgi programs]),
	cgiurl=$withval,
	cgiurl=/nagios/cgi-bin)
CGIURL="$cgiurl"
AC_DEFINE_UNQUOTED(CGIURL,"$CGIURL",[URL of CGI programs])

AC_ARG_WITH(nagios_user,
	ACX_HELP_STRING([--with-nagios-user=USER],
		[set user name to run nagios]),
	nagios_usr=$withval,
	nagios_usr=nagios)
AC_ARG_WITH(nagios_group,
	ACX_HELP_STRING([--with-nagios-group=GROUP],
		[set group name to run nagios]),
	nagios_grp=$withval,
	nagios_grp=nagios)
AC_SUBST(nagios_usr)
AC_SUBST(nagios_grp)
INSTALL_OPTS="-o $nagios_usr -g $nagios_grp"
AC_SUBST(INSTALL_OPTS)

AC_ARG_WITH(trusted_path,
	ACX_HELP_STRING([--with-trusted-path=PATH],
		[sets trusted path for executables called by scripts (default=/bin:/sbin:/usr/bin:/usr/sbin)]),
	trusted_path=$withval,
	trusted_path=/bin:/sbin:/usr/bin:/usr/sbin)
AC_SUBST(trusted_path)

EXTRAS=
dnl PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/etc:/usr/local/bin:/usr/local/sbin:$PATH

LDFLAGS="$LDFLAGS -L."

ac_cv_uname_m=`uname -m`
ac_cv_uname_s=`uname -s`
ac_cv_uname_r=`uname -r`
ac_cv_uname_v=`uname -v`

dnl Checks for programs.
AC_PATH_PROG(PYTHON,python)
AC_PATH_PROG(PERL,perl)
AC_PATH_PROG(SH,sh)

AC_PATH_PROG(HOSTNAME,hostname)
AC_PATH_PROG(BASENAME,basename)

dnl
dnl Check for miscellaneous stuff
dnl 

case $host_vender-$host_os in
sun*)
	AC_DEFINE(__EXTENSIONS__,1,[Sun's netdb.h needs this for getaddrinfo])
	;;
osf*)
	AC_DEFINE(_OSF_SOURCE,1,[OSF needs this for getaddrinfo])
	;;
esac

dnl
dnl Checks for libraries.
dnl

AC_CHECK_LIB(dce,main,SOCKETLIBS="$SOCKETLIBS -ldce")
AC_CHECK_LIB(nsl,main,SOCKETLIBS="$SOCKETLIBS -lnsl")
AC_CHECK_LIB(socket,socket,SOCKETLIBS="$SOCKETLIBS -lsocket")
AC_CHECK_LIB(resolv,main,SOCKETLIBS="$SOCKETLIBS -lresolv")
AC_SUBST(SOCKETLIBS)

dnl Check for PostgreSQL libraries
_SAVEDLIBS="$LIBS"
_SAVEDCPPFLAGS="$CPPFLAGS"
AC_ARG_WITH(pgsql,
	ACX_HELP_STRING([--with-pgsql=DIR],
		[sets path to pgsql installation]),
	PGSQL=$withval,)
AC_CHECK_LIB(crypt,main)
if test "$ac_cv_lib_crypt_main" = "yes"; then
  if test -n "$PGSQL"; then
    LDFLAGS="$LDFLAGS -L$PGSQL/lib"
    CPPFLAGS="$CPPFLAGS -I$PGSQL/include"
  fi
  AC_CHECK_LIB(pq,PQsetdbLogin,,,-lcrypt)
  if test "$ac_cv_lib_pq_PQsetdbLogin" = "yes"; then
    AC_CHECK_HEADERS(pgsql/libpq-fe.h)
    AC_CHECK_HEADERS(postgresql/libpq-fe.h)
    AC_CHECK_HEADERS(libpq-fe.h)
    if [[ -n "$PGSQL" -a "$ac_cv_header_libpq_fe_h" = "yes" ]]; then
      PGLIBS="-L$PGSQL/lib -lpq -lcrypt"
      PGINCLUDE="-I$PGSQL/include"
    elif test  "$ac_cv_header_pgsql_libpq_fe_h" = "yes"; then
      PGLIBS="-lpq -lcrypt"
      PGINCLUDE="-I/usr/include/pgsql"
    elif test  "$ac_cv_header_postgresql_libpq_fe_h" = "yes"; then
      PGLIBS="-L$PGSQL/lib -lpq -lcrypt"
      PGINCLUDE="-I/usr/include/postgresql"
    elif test  "$ac_cv_header_libpq_fe_h" = "yes"; then
      PGLIBS="-L$PGSQL/lib -lpq -lcrypt"
      PGINCLUDE="-I$PGSQL/include"
    fi
    if test -z "$PGINCLUDE"; then
      AC_MSG_WARN([Skipping PostgreSQL plugin (check_pgsql)])
      AC_MSG_WARN([install PostgreSQL headers to compile this plugin (see REQUIREMENTS).])
    else
      AC_SUBST(PGLIBS)
      AC_SUBST(PGINCLUDE)
      EXTRAS="$EXTRAS check_pgsql"
    fi
  else
    AC_MSG_WARN([Skipping PostgreSQL plugin (check_pgsql)])
    AC_MSG_WARN([LIBS="$LIBS" CPPFLAGS="$CPPFLAGS"])
    AC_MSG_WARN([install PostgreSQL libs to compile this plugin (see REQUIREMENTS).])
  fi
else
  AC_MSG_WARN([Skipping PostgreSQL plugin (check_pgsql)])
  AC_MSG_WARN([install lib crypt and PostgreSQL libs to compile this plugin (see REQUIREMENTS).])
fi
LIBS="$_SAVEDLIBS"
CPPFLAGS="$_SAVEDCPPFLAGS"

dnl Check for radius libraries
_SAVEDLIBS="$LIBS"
AC_CHECK_LIB(radiusclient,rc_read_config)
if test "$ac_cv_lib_radiusclient_rc_read_config" = "yes"; then
  EXTRAS="$EXTRAS check_radius"
	RADIUSLIBS="-lradiusclient"
  AC_SUBST(RADIUSLIBS)
else
  AC_MSG_WARN([Skipping radius plugin])
  AC_MSG_WARN([install radius libs to compile this plugin (see REQUIREMENTS).])
fi
LIBS="$_SAVEDLIBS"

dnl Check for LDAP libraries
_SAVEDLIBS="$LIBS"
AC_CHECK_LIB(ldap,main,,,-llber)
if test "$ac_cv_lib_ldap_main" = "yes"; then
  LDAPLIBS="-lldap -llber"\
  LDAPINCLUDE="-I/usr/include/ldap"
  AC_SUBST(LDAPLIBS)
  AC_SUBST(LDAPINCLUDE)
  EXTRAS="$EXTRAS check_ldap"
else
  AC_MSG_WARN([Skipping LDAP plugin])
  AC_MSG_WARN([install LDAP libs to compile this plugin (see REQUIREMENTS).])
fi
LIBS="$_SAVEDLIBS"


dnl Check for mysql libraries
_SAVEDLIBS="$LIBS"
_SAVEDCPPFLAGS="$CPPFLAGS"
AC_ARG_WITH(mysql,
	ACX_HELP_STRING([--with-mysql=DIR],
		[sets path to mysql installation (assumes lib/mysql and include subdirs]),
	MYSQL=$withval,)
if test -n "$MYSQL"; then
  MYSQLLIBDIR=$MYSQL/lib/mysql
  CPPFLAGS="-I$MYSQL/include"
  AC_CHECK_LIB(mysqlclient,mysql_init,MYSQLLIBS="-lmysqlclient -lz" check_mysql_LDFLAGS="-L$MYSQLLIBDIR ",,-L$MYSQLLIBDIR -lz)
  AC_CHECK_LIB(mysqlclient,mysql_close,MYSQLLIBS="-lmysqlclient")
elif test -f /usr/lib/libmysqlclient.so; then
  AC_CHECK_LIB(mysqlclient,mysql_init,MYSQLLIBS="-lmysqlclient -lz",,-lz)
  AC_CHECK_LIB(mysqlclient,mysql_close,MYSQLLIBS="-lmysqlclient")
elif test -f /usr/lib/libmysqlclient.a; then
  AC_CHECK_LIB(mysqlclient,mysql_init,MYSQLLIBS="-lmysqlclient -lz",,-lz)
  AC_CHECK_LIB(mysqlclient,mysql_close,MYSQLLIBS="-lmysqlclient")
elif test -f /usr/lib/mysql/libmysqlclient.so; then
  AC_CHECK_LIB(mysqlclient,mysql_init,MYSQLLIBS="-lmysqlclient -lz" check_mysql_LDFLAGS="-L/usr/lib/mysql",,-L/usr/lib/mysql -lz)
  AC_CHECK_LIB(mysqlclient,mysql_close,MYSQLLIBS="-lmysqlclient" check_mysql_LDFLAGS="-L/usr/lib/mysql",,-L/usr/lib/mysql)
elif test -f /usr/lib/mysql/libmysqlclient.a; then
  AC_CHECK_LIB(mysqlclient,mysql_init,MYSQLLIBS="-lmysqlclient -lz" check_mysql_LDFLAGS="-L/usr/lib/mysql",,-L/usr/lib/mysql -lz)
  AC_CHECK_LIB(mysqlclient,mysql_close,MYSQLLIBS="-lmysqlclient" check_mysql_LDFLAGS="-L/usr/lib/mysql",,-L/usr/lib/mysql)
fi
if test "$ac_cv_lib_mysqlclient_mysql_init" = "yes" -o "$ac_cv_lib_mysqlclient_mysql_close" = "yes"; then
  AC_CHECK_HEADERS(mysql/mysql.h mysql/errmsg.h, MYSQLINCLUDE="-I$MYSQL/include" )
  if test "$ac_cv_header_mysql_mysql_h" = "yes" -a "$ac_cv_header_mysql_errmsg_h" = "yes"; then
    EXTRAS="$EXTRAS check_mysql"
    AC_SUBST(MYSQLINCLUDE)
    AC_SUBST(MYSQLLIBS)
    AC_SUBST(check_mysql_LDFLAGS)
  else
    AC_MSG_WARN([Skipping mysql plugin])
    AC_MSG_WARN([install mysql client headers to compile this plugin (see REQUIREMENTS).])
  fi
else
  AC_MSG_WARN([Skipping mysql plugin])
  AC_MSG_WARN([install mysql client libs to compile this plugin (see REQUIREMENTS).])
fi
CPPFLAGS="$_SAVEDCPPFLAGS"
LIBS="$_SAVEDLIBS"

dnl Check for OpenSSL location
AC_PATH_PROG(OPENSSL,openssl)
if test "$OPENSSL" = "/usr/bin/openssl"; then
  OPENSSL=/usr
elif test "$OPENSSL" = "/usr/sbin/openssl"; then
  OPENSSL=/usr
elif test "$OPENSSL" = "/opt/bin/openssl"; then
  OPENSSL=/opt
elif test "$OPENSSL" = "/opt/openssl/bin/openssl"; then
  OPENSSL=/opt/openssl
elif test "$OPENSSL" = "/usr/slocal/bin/openssl"; then
  OPENSSL=/usr/slocal
elif test "$OPENSSL" = "/usr/local/bin/openssl"; then
  OPENSSL=/usr/local
elif test "$OPENSSL" = "/usr/local/ssl/bin/openssl"; then
  OPENSSL=/usr/local/ssl
fi
AC_ARG_WITH(openssl,
	ACX_HELP_STRING([--with-openssl=DIR],
		[sets path to openssl installation]),
	OPENSSL=$withval,)

dnl #########################################################################
dnl Check if Posix getaddrinfo() is available.  It is also possible to use
dnl the version from the lwres library distributed with BIND.
dnl #########################################################################
AC_ARG_ENABLE([emulate-getaddrinfo],
              ACX_HELP_STRING([--enable-emulate-getaddrinfo],
                             [enable getaddrinfo emulation (default=no)]),
              ,
              enable_emulate_getaddrinfo=no)
AC_ARG_WITH(lwres,
            ACX_HELP_STRING([--with-lwres=DIR],
                           [use lwres library for getaddrinfo (default=no)]),
            ,
            with_lwres=no)

dnl ## enable force to test getaddrinfo.c
if test x$enable_emulate_getaddrinfo = xforce ; then
        enable_emulate_getaddrinfo=yes
        have_getaddrinfo=no
else

have_getaddrinfo=no
if test x$with_lwres != xno ; then
        if test "$with_lwres" != yes ; then
                   CPPFLAGS="-I${with_lwres}/include $CPPFLAGS"
                   LDFLAGS="-L${with_lwres}/lib $LDFLAGS"
        fi
        AC_CHECK_HEADERS(lwres/netdb.h, ,
                        [AC_MSG_ERROR([cannot find <lwres/netdb.h>])])
        AC_CHECK_LIB(lwres, lwres_getaddrinfo, ,
                     [AC_MSG_ERROR([cannot find the lwres library])],
                     -lnsl -lpthread)
        have_getaddrinfo=yes
fi

if test x$have_getaddrinfo != xyes ; then
        AC_SEARCH_LIBS(getaddrinfo, socket resolv bind nsl c_r cr, have_getaddrinfo=yes)
fi

dnl # Special nonsense for systems that actually have getaddrinfo but
dnl # redefine the name to something else, e.g. OSF
if test x$have_getaddrinfo != xyes ; then
        AC_MSG_CHECKING(if getaddrinfo is redefined in netdb.h)
        AC_TRY_LINK([
#               include <netdb.h>
        ], [
                struct addrinfo hints, *res;
                int err;

                err = getaddrinfo ("host", "service", &hints, &res);
        ], [
                have_getaddrinfo=yes
                AC_MSG_RESULT(yes)
        ], [AC_MSG_RESULT(no)])
fi

fi

if test x$have_getaddrinfo != xno ; then
        if test x$enable_emulate_getaddrinfo != xno ; then
                AC_MSG_ERROR([getaddrinfo found but emulate-getaddrinfo was enabled])
        fi
        AC_DEFINE(HAVE_GETADDRINFO, 1,
                  [Does system provide RFC 2553/Posix getaddrinfo?])
else
        if test x$enable_emulate_getaddrinfo != xyes ; then
                AC_MSG_ERROR([getaddrinfo not found: try --with-lwres or --enable-emulate-getaddrinfo])
        fi
        LIBOBJS="$LIBOBJS getaddrinfo.o"
fi

if test x"$enable_emulate_getaddrinfo" != xno ; then
    have_resolver=no

  dnl  Try for getipnodebyname
    AC_SEARCH_LIBS(getipnodebyname, resolv bind nsl c_r cr, have_resolver=yes)
    if test x"$have_resolver" != xno ; then
         AC_DEFINE(HAVE_GETIPNODEBYNAME, 1,
                   [Set when getipnodebyname is available])
    fi

  dnl  Try for gethostbyname_r
    if test x"$have_resolver" = xno ; then
        AC_SEARCH_LIBS(gethostbyname_r, resolv bind nsl c_r cr,
                       [have_resolver=yes
                        ACX_WHICH_GETHOSTBYNAME_R])
    fi

  dnl  Try for gethostbyname
    if test x"$have_resolver" = xno ; then
        if test x"$enable_pthreads" != xno ; then
            AC_MSG_WARN([using threads but cannot find gethostbyname_r or getipnodebyname])
        fi
        AC_SEARCH_LIBS(gethostbyname, resolv bind nsl, ,
                       [AC_MSG_ERROR([cannot find gethostbyname])])
    fi
    LIBOBJS="$LIBOBJS gethostbyname.o"

    AC_CACHE_CHECK([for IPv6 support], acx_cv_sys_use_ipv6, [
            AC_TRY_COMPILE([
#               include <netinet/in.h>
            ], [
                struct sockaddr_in6 sin6;
                void *p;

                sin6.sin6_family = AF_INET6;
                sin6.sin6_port = 587;
                p = &sin6.sin6_addr;
            ], [acx_cv_sys_use_ipv6=yes], [acx_cv_sys_use_ipv6=no])
    ])
    if test x"$acx_cv_sys_use_ipv6" != xno ; then
            AC_DEFINE(USE_IPV6,1,[Enable IPv6 support])
    fi
fi

AC_CHECK_HEADERS(krb5.h,FOUNDINCLUDE=yes,FOUNDINCLUDE=no)
if test "$FOUNDINCLUDE" = "no"; then
  _SAVEDCPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$_SAVEDCPPFLAGS -I/usr/kerberos/include"
  unset ac_cv_header_krb5_h
  AC_CHECK_HEADERS(krb5.h,
                   KRB5INCLUDE="-I/usr/kerberos/include"
                   FOUNDINCLUDE=yes,
                   FOUNDINCLUDE=no)
fi
AC_SUBST(KRBINCLUDE)
if test "$FOUNDINCLUDE" = "no"; then
  CPPFLAGS="$_SAVEDCPPFLAGS"
fi

dnl Check for OpenSSL header files
unset FOUNDINCLUDE
_SAVEDCPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS -I$OPENSSL/include"
AC_CHECK_HEADERS(openssl/ssl.h openssl/x509.h openssl/rsa.h openssl/pem.h openssl/crypto.h openssl/err.h,
                 SSLINCLUDE="-I$OPENSSL/include"
                 FOUNDINCLUDE=yes,
                 FOUNDINCLUDE=no)
if test "$FOUNDINCLUDE" = "no"; then
  AC_CHECK_HEADERS(ssl.h x509.h rsa.h pem.h crypto.h err.h,
                   SSLINCLUDE="-I$OPENSSL/include"
                   FOUNDINCLUDE=yes,
                   FOUNDINCLUDE=no)
fi
AC_SUBST(SSLINCLUDE)
if test "$FOUNDINCLUDE" = "no"; then
  CPPFLAGS="$_SAVEDCPPFLAGS"
fi

dnl Check for crypto lib
_SAVEDLIBS="$LIBS"
AC_CHECK_LIB(crypto,CRYPTO_lock,,,-L$OPENSSL/lib)
if test "$ac_cv_lib_crypto_CRYPTO_lock" = "yes"; then
  dnl Check for SSL lib
  AC_CHECK_LIB(ssl,main,LDFLAGS="$LDFLAGS -L$OPENSSL/lib" SSLLIBS="-lssl -lcrypto",AC_CHECK_LIB(ssl,main,LDFLAGS="$LDFLAGS -L$OPENSSL/lib" SSLLIBS="-lssl -lcrypto"),-L$OPENSSL/lib -lcrypto)
fi
LIBS="$_SAVEDLIBS"

dnl test headers and libs to decide whether check_http should use SSL
if test "$ac_cv_lib_crypto_CRYPTO_lock" = "yes"; then
  if test "$ac_cv_lib_ssl_main" = "yes"; then
    if test "$FOUNDINCLUDE" = "yes"; then
      AC_SUBST(SSLLIBS)
      AC_DEFINE(HAVE_SSL,1,[Define if SSL libraries are found])
    fi
  fi
fi
CPPFLAGS="$_SAVEDCPPFLAGS"

dnl
dnl Checks for header files.
dnl

AC_HEADER_STDC
AC_HEADER_TIME
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(signal.h strings.h string.h syslog.h unistd.h uio.h errno.h regex.h sys/types.h sys/time.h sys/socket.h sys/loadavg.h)
AC_CHECK_HEADERS(stdarg.h sys/unistd.h unistd.h ctype.h stdlib.h)
AC_CHECK_HEADERS(sys/vfs.h,
                 [AC_TRY_COMPILE([#include <sys/vfs.h>],
                                 [struct statfs *buf],
                                 [AC_DEFINE(HAVE_STRUCT_STATFS,1,[Define if statfs struct can be found])])])
AC_CHECK_HEADERS(sys/param.h sys/mount.h,
                 [AC_TRY_COMPILE([#include <sys/param.h>
#include <sys/mount.h>],
                                 [struct statfs *buf],
                                 [AC_DEFINE(HAVE_STRUCT_STATFS,1,[Define if statfs struct can be found])])])

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_STRUCT_TM
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL

AC_CHECK_SIZEOF(int,cross)
AC_CHECK_SIZEOF(long,cross)
AC_CHECK_SIZEOF(short,cross)

AC_CACHE_CHECK([for long long],ac_cv_have_longlong,[
AC_TRY_RUN([#include <stdio.h>
main() { long long x = 1000000; x *= x; exit(((x/1000000) == 1000000)? 0: 1); }],
ac_cv_have_longlong=yes,ac_cv_have_longlong=no,ac_cv_have_longlong=cross)])
if test x"$ac_cv_have_longlong" = x"yes"; then
    AC_DEFINE(HAVE_LONGLONG,1,[Define if system has long long type])
fi

#
# Check if the compiler supports the LL prefix on long long integers.
# AIX needs this.

AC_CACHE_CHECK([for LL suffix on long long integers],ac_cv_compiler_supports_ll, [
    AC_TRY_COMPILE([#include <stdio.h>],[long long i = 0x8000000000LL],
        ac_cv_compiler_supports_ll=yes,ac_cv_compiler_supports_ll=no)])
if test x"$ac_cv_compiler_supports_ll" = x"yes"; then
   AC_DEFINE(COMPILER_SUPPORTS_LL,1,[Define if compiler support long long])
fi

AC_CACHE_CHECK([for __va_copy],ac_cv_HAVE_VA_COPY,[
AC_TRY_LINK([#include <stdarg.h>
va_list ap1,ap2;], [__va_copy(ap1,ap2);],
ac_cv_HAVE_VA_COPY=yes,ac_cv_HAVE_VA_COPY=no)])
if test x"$ac_cv_HAVE_VA_COPY" = x"yes"; then
    AC_DEFINE(HAVE_VA_COPY,1,[Define if system has va_copy])
fi

AC_CHECK_FUNCS(vsnprintf snprintf asprintf vasprintf)
AC_CACHE_CHECK([for C99 vsnprintf],ac_cv_HAVE_C99_VSNPRINTF,[
AC_TRY_RUN([
#include <sys/types.h>
#include <stdarg.h>
void foo(const char *format, ...) { 
       va_list ap;
       int len;
       char buf[5];

       va_start(ap, format);
       len = vsnprintf(buf, 0, format, ap);
       va_end(ap);
       if (len != 5) exit(1);

       va_start(ap, format);
       len = vsnprintf(0, 0, format, ap);
       va_end(ap);
       if (len != 5) exit(1);

       if (snprintf(buf, 3, "hello") != 5 || strcmp(buf, "he") != 0) exit(1);

       exit(0);
}
main() { foo("hello"); }
],
ac_cv_HAVE_C99_VSNPRINTF=yes,ac_cv_HAVE_C99_VSNPRINTF=no,ac_cv_HAVE_C99_VSNPRINTF=cross)])
if test x"$ac_cv_HAVE_C99_VSNPRINTF" = x"yes"; then
    AC_DEFINE(HAVE_C99_VSNPRINTF,1,[Define if system has C99 compatible vsnprintf])
fi

AC_TRY_COMPILE([#include <sys/time.h>],
               [struct timeval *tv;
                struct timezone *tz;],
               AC_DEFINE(HAVE_STRUCT_TIMEVAL,1,[Define if we have a timeval structure])
               AC_TRY_COMPILE([#include <sys/time.h>],
                              [struct timeval *tv;
                               struct timezone *tz;
                               gettimeofday(tv, tz);],
                              AC_DEFINE(HAVE_GETTIMEOFDAY,1,[Define if gettimeofday is found]),
                              AC_DEFINE(NEED_GETTIMEOFDAY,1,[Define if gettimeofday is needed])))

dnl Checks for library functions.
AC_CHECK_FUNCS(memmove select socket strdup strstr strtod strtol strtoul)

AC_MSG_CHECKING(return type of socket size)
AC_TRY_COMPILE([#include <stdlib.h>
                #include <sys/types.h>
                #include <sys/socket.h>],
               [int a = send(1, (const void *) buffer, (size_t *) 0, (int *) 0);],
               ac_cv_socket_size_type=["size_t"]
                AC_MSG_RESULT(size_t),
               ac_cv_socket_size_type=["int"]
                AC_MSG_RESULT(int))

AC_DEFINE_UNQUOTED(SOCKET_SIZE_TYPE, $ac_cv_socket_size_type ,
	[Define type of socket size])

if test -f "/proc/loadavg"
then
  AC_DEFINE(HAVE_PROC_LOADAVG,1,[Define if /proc/loadavg or similar exists])
  AC_DEFINE_UNQUOTED(PROC_LOADAVG,"/proc/loadavg",[Location of /proc/loadavg])
fi

dnl #### Process table test

AC_PATH_PROG(PATH_TO_PS,ps)
ac_cv_use_ps_vars=no

AC_MSG_CHECKING(for ps syntax)
dnl  STAT UCOMM              VSZ   RSS USER       UID  PPID COMMAND
if ps -weo 'stat comm vsz rss user uid ppid args' 2>/dev/null | \
	egrep -i ["^ *S[TAUES]* +[UCOMDNA]+ +[VSIZE]+ +R[S]+ +U[SER]+ +U[ID]+ +P[PID]+ +[RGSCOMDNA]+"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,procprog,&pos]"
	ac_cv_ps_raw_command="$PATH_TO_PS -weo 'stat user ppid args'"
	ac_cv_ps_command="$PATH_TO_PS -weo 'stat uid ppid comm args'"
	ac_cv_ps_format="%s %d %d %s %n"
	ac_cv_vsz_command="$PATH_TO_PS -weo 'vsz comm'"
	ac_cv_vsz_format="%d %s"
	ac_cv_rss_command="$PATH_TO_PS -weo 'rss comm'"
	ac_cv_rss_format="%d %s"
	EXTRAS="$EXTRAS check_nagios"
	AC_MSG_RESULT([$ac_cv_ps_command])

dnl FreeBSD
elif ps waxco 'state command vsz rss uid user ppid' 2>/dev/null | \
	egrep -i ["^STAT +COMMAND +VSZ +RSS +UID +USER +PPID"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,procprog,&pos]"
	ac_cv_ps_raw_command="$PATH_TO_PS waxo 'state uid ppid command'"
	ac_cv_ps_command="$PATH_TO_PS waxco 'state uid ppid command command'"
	ac_cv_ps_format="%s %d %d %s %n"
	ac_cv_vsz_command="$PATH_TO_PS waxco 'vsz command'"
	ac_cv_vsz_format="%d %s"
	ac_cv_rss_command="$PATH_TO_PS waxco 'rss command'"
	ac_cv_rss_format="%d %s"
	EXTRAS="$EXTRAS check_nagios"
	AC_MSG_RESULT([$ac_cv_ps_command])

dnl BSD-like mode in RH 6.1
elif ps waxno 'state comm vsz rss uid user ppid args' 2>/dev/null | \
	egrep -i ["^S +COMMAND +VSZ +RSS +UID +USER +PPID +[RGSCOMDNA]+"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,procprog,&pos]"
	ac_cv_ps_raw_command="$PATH_TO_PS waxno 'state user ppid comm'"
	ac_cv_ps_command="$PATH_TO_PS waxno 'state uid ppid comm args'"
	ac_cv_ps_format="%s %d %d %s %n"
	ac_cv_vsz_command="$PATH_TO_PS waxno 'vsz comm'"
	ac_cv_vsz_format="%d %s"
	ac_cv_rss_command="$PATH_TO_PS waxno 'rss comm'"
	ac_cv_rss_format="%d %s"
	EXTRAS="$EXTRAS check_nagios"
	AC_MSG_RESULT([$ac_cv_ps_command])

dnl SunOS 4.1.3:
dnl  F  UID  PID  PPID  CP  PRI  NI  SZ  RSS  WCHAN  STAT  TT  TIME  COMMAND
elif ps -laxnwww 2>/dev/null | \
	egrep -i ["^ *F(LAGS)? +UID +PID +PPID +CP +PRI +NI +(SZ)|(VSZ)|(SIZE) +RSS +WCHAN +STAT? +TTY? +TIME +COMMAND"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_raw_command="$PATH_TO_PS laxnwww"
	ac_cv_ps_varlist="[&procuid,&procppid,procstat,&pos,procprog]"
	ac_cv_ps_command="$PATH_TO_PS -laxnwww"
	ac_cv_ps_format="%*s %d %*s %d %*s %*s %*s %*s %*s %*s %s %*s %*s %n%s"
	ac_cv_vsz_command="$PATH_TO_PS laxnwww"
	ac_cv_vsz_format="%*s %*s %*s %*s %*s %*s %*s %d"
	ac_cv_rss_command="$PATH_TO_PS laxnwww"
	ac_cv_rss_format="%*s %*s %*s %*s %*s %*s %*s %*s %d"
	EXTRAS="$EXTRAS check_nagios"
	AC_MSG_RESULT([$ac_cv_ps_command])

dnl Debian Linux / procps v1.2.9:
dnl  FLAGS   UID   PID  PPID PRI  NI   SIZE   RSS WCHAN       STA TTY TIME COMMAND
dnl    100     0     1     0   0   0    776    76  c0131c8c   S  ffff  0:11 init [2]
dnl
elif ps laxnwww 2>/dev/null | \
	egrep -i ["^ *F(LAGS)? +UID +PID +PPID +PRI +NI +(VSZ)|(SIZE) +RSS +WCHAN +STAT? TTY +TIME +COMMAND"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_raw_command="$PATH_TO_PS laxnwww"
	ac_cv_ps_varlist="[&procuid,&procppid,procstat,&pos,procprog]"
	ac_cv_ps_command="$PATH_TO_PS laxnwww"
	ac_cv_ps_format="%*s %d %*s %d %*s %*s %*s %*s %*s %s %*s %*s %n%s"
	ac_cv_vsz_command="$PATH_TO_PS laxnwww"
	ac_cv_vsz_format="%*s %*s %*s %*s %*s %*s %d"
	ac_cv_rss_command="$PATH_TO_PS laxnwww"
	ac_cv_rss_format="%*s %*s %*s %*s %*s %*s %*s %d"
	EXTRAS="$EXTRAS check_nagios"
	AC_MSG_RESULT([$ac_cv_ps_command])

dnl OpenBSD (needs to come early because -exo appears to work, but does not give all procs)
elif ps -axo 'stat comm vsz rss user uid ppid args' 2>/dev/null | \
	egrep -i ["^ *S[TAUES]* +[UCOMDNA]+ +[VSIZE]+ +R[S]+ +U[SER]+ +U[ID]+ +P[PID]+ +[RGSCOMDNA]+"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,procprog,&pos]"
	ac_cv_ps_raw_command="$PATH_TO_PS -axo 'stat user ppid args'"
	ac_cv_ps_command="$PATH_TO_PS -axo 'stat uid ppid comm args'"
	ac_cv_ps_format="%s %d %d %s %n"
	ac_cv_vsz_command="$PATH_TO_PS -axo 'vsz comm'"
	ac_cv_vsz_format="%d %s"
	ac_cv_rss_command="$PATH_TO_PS -axo 'rss comm'"
	ac_cv_rss_format="%d %s"
	EXTRAS="$EXTRAS check_nagios"
	AC_MSG_RESULT([$ac_cv_ps_command])

dnl AIX 4.3.3 - needs verification. This works for Tru64 - needs %*[ +] in PS_FORMAT
elif ps -ao 'stat comm vsz rss user uid ppid args' 2>/dev/null | \
	egrep -i ["^ *S[TAUES]* +[UCOMDNA]+ +[VSIZE]+ +R[S]+ +U[SER]+ +U[ID]+ +P[PID]+ +[RGSCOMDNA]+"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,procprog,&pos]"
	ac_cv_ps_raw_command="$PATH_TO_PS -ao 'stat user ppid args'"
	ac_cv_ps_command="$PATH_TO_PS -ao 'stat uid ppid comm args'"
	ac_cv_ps_format="[["%s%*[ +] %d %d %s %n"]]"
	ac_cv_vsz_command="$PATH_TO_PS -ao 'vsz comm'"
	ac_cv_vsz_format="%d %s"
	ac_cv_rss_command="$PATH_TO_PS -ao 'rss comm'"
	ac_cv_rss_format="%d %s"
	EXTRAS="$EXTRAS check_nagios"
	AC_MSG_RESULT([$ac_cv_ps_command])

elif ps -eo 's comm vsz rss user uid ppid args' 2>/dev/null | \
	egrep -i ["^S[TAUES]* +C[OMDNA]+ +[VSIZE]+ +U[SER]+ +U[ID]+ +P[PID]+ +[RGSCOMDNA]+"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,procprog,&pos]"
	ac_cv_ps_raw_command="$PATH_TO_PS -eo 's user ppid args'"
	ac_cv_ps_command="$PATH_TO_PS -eo 's uid ppid comm args'"
	ac_cv_ps_format="%s %d %d %s %n"
	ac_cv_vsz_command="$PATH_TO_PS -eo 'vsz comm'"
	ac_cv_vsz_format="%d %s"
	ac_cv_rss_command="$PATH_TO_PS -eo 'rss comm'"
	ac_cv_rss_format="%d %s"
	EXTRAS="$EXTRAS check_nagios"
	AC_MSG_RESULT([$ac_cv_ps_command])

elif ps -Ao 's comm vsz rss uid user ppid args' 2>/dev/null | \
	egrep -i ["^S[TAUES]* +C[OMDNA]+ +V[SIZE]+ +RSS +UID +USER +PPID +[RGSCOMDNA]+"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,procprog,&pos]"
	ac_cv_ps_raw_command="$PATH_TO_PS -Ao 's user ppid args'"
	ac_cv_ps_command="$PATH_TO_PS -Ao 's uid ppid comm args'"
	ac_cv_ps_format="%s %d %d %s %n"
	ac_cv_vsz_command="$PATH_TO_PS -Ao 'vsz comm'"
	ac_cv_vsz_format="%d %s"
	ac_cv_rss_command="$PATH_TO_PS -Ao 'rss comm'"
	ac_cv_rss_format="%d %s"
	EXTRAS="$EXTRAS check_nagios"
	AC_MSG_RESULT([$ac_cv_ps_command])

elif ps -Ao 'status comm vsz rss uid user ppid args' 2>/dev/null | \
	egrep -i ["^S[TAUES]* +C[OMDNA]+ +V[SIZE]+ +RSS +UID +USER +PPID +[RGSCOMDNA]+"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,procprog,&pos]"
	ac_cv_ps_raw_command="$PATH_TO_PS -Ao 'status user ppid args'"
	ac_cv_ps_command="$PATH_TO_PS -Ao 'status uid ppid comm args'"
	ac_cv_ps_format="%s %d %d %s %n"
	ac_cv_vsz_command="$PATH_TO_PS -Ao 'vsz comm'"
	ac_cv_vsz_format="%d %s"
	ac_cv_rss_command="$PATH_TO_PS -Ao 'rss comm'"
	ac_cv_rss_format="%d %s"
	EXTRAS="$EXTRAS check_nagios"
	AC_MSG_RESULT([$ac_cv_ps_command])

elif ps -Ao 'state comm vsz rss uid user ppid args' 2>/dev/null | \
	egrep -i ["^S[TAUES]* +C[OMDNA]+ +V[SIZE]+ +RSS +UID +USER +PPID +[RGSCOMDNA]+"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,procprog,&pos]"
	ac_cv_ps_raw_command="$PATH_TO_PS -Ao 'state user ppid args'"
	ac_cv_ps_command="$PATH_TO_PS -Ao 'state uid ppid comm args'"
	ac_cv_ps_format="%s %d %d %s %n"
	ac_cv_vsz_command="$PATH_TO_PS -Ao 'vsz comm'"
	ac_cv_vsz_format="%d %s"
	ac_cv_rss_command="$PATH_TO_PS -Ao 'rss comm'"
	ac_cv_rss_format="%d %s"
	EXTRAS="$EXTRAS check_nagios"
	AC_MSG_RESULT([$ac_cv_ps_command])

dnl wonder who takes state instead of stat
elif ps -ao 'state command vsz rss user ppid args' 2>/dev/null | \
	egrep -i ["^S[TAUES]* +C[OMDNA]+ +V[SIZE]+ +RSS +UID +USER +PPID +[RGSCOMDNA]+"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,procprog,&pos]"
	ac_cv_ps_raw_command="$PATH_TO_PS -ao 'state user ppid args'"
	ac_cv_ps_command="$PATH_TO_PS -ao 'state uid ppid command args'"
	ac_cv_ps_format="%s %d %d %s %n"
	ac_cv_vsz_command="$PATH_TO_PS -ao 'vsz command'"
	ac_cv_vsz_format="%d %s"
	ac_cv_rss_command="$PATH_TO_PS -ao 'rss command'"
	ac_cv_rss_format="%d %s"
	EXTRAS="$EXTRAS check_nagios"
	AC_MSG_RESULT([$ac_cv_ps_command])

dnl IRIX 53
elif ps -el 2>/dev/null | \
	egrep -i ["^ *F +S +UID +PID +PPID +C +PRI +NI +P +SZ +RSS +WCHAN +TTY +TIME +[RGSCOMDNA]+"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,&pos,procprog]"
	ac_cv_ps_command="$PATH_TO_PS -el"
	ac_cv_ps_format="%*s %s %d %*s %d %*s %*s %*s %*s %*s %*s %*s %*s %*s %n%s"
	ac_cv_vsz_command="$PATH_TO_PS -el"
	ac_cv_vsz_format="%*s %*s %*s %*s %d"
	ac_cv_rss_command="$PATH_TO_PS -el"
	ac_cv_rss_format="%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %d"
	AC_MSG_RESULT([$ac_cv_ps_command])

dnl IRIX 63
elif ps -el 2>/dev/null | \
	egrep -i ["^ *F +S +UID +PID +PPID +C +PRI +NI +P +ADDR +SZ +RSS +WCHAN +TTY +TIME +[RGSCOMDNA]+"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,&pos,procprog]"
	ac_cv_ps_command="$PATH_TO_PS -el"
	ac_cv_ps_format="%*s %s %d %*s %d %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %n%s"
	ac_cv_vsz_command="$PATH_TO_PS -el"
	ac_cv_vsz_format="%*s %*s %*s %*s %d"
	ac_cv_rss_command="$PATH_TO_PS -el"
	ac_cv_rss_format="%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %d"
	AC_MSG_RESULT([$ac_cv_ps_command])

dnl AIX 4.1:
dnl     F S      UID   PID  PPID   C PRI NI ADDR  SZ  RSS   WCHAN    TTY  TIME CMD
dnl    303 A        0     0     0 120  16 -- 1c07  20   24              -  0:45 swapper
elif ps -el 2>/dev/null | \
	egrep -i ["^ *F +S +UID +PID +PPID +C +PRI +NI +ADDR +SZ +WCHAN +TTY +TIME +[RGSCOMDNA]+"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,&pos,procprog]"
	ac_cv_ps_command="$PATH_TO_PS -el"
	ac_cv_ps_format="%*s %s %d %*s %d %*s %*s %*s %*s %*s %*s %*s %*s %n%s"
	ac_cv_vsz_command="$PATH_TO_PS -el"
	ac_cv_vsz_format="%*s %*s %*s %*s %*s %*s %*s %*s %*s %d"
	ac_cv_rss_command="$PATH_TO_PS -el"
	ac_cv_rss_format="%*s %*s %*s %*s %*s %*s %*s %*s %*s %d"
	AC_MSG_RESULT([$ac_cv_ps_command])

dnl AIX?
elif ps glaxen 2>/dev/null | \
	egrep -i ["^ *F +UID +PID +PPID +PRI +NI +VSZ +RSS +WCHAN +STAT +TTY +TIME +COMMAND"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[&procuid,&procppid,procstat,&pos,procprog]"
	ac_cv_ps_command="$PATH_TO_PS glaxen"
	ac_cv_ps_format="%*s %d %*s %d %*s %*s %*s %*s %*s %s %*s %*s %n%s"
	ac_cv_vsz_command="$PATH_TO_PS glaxen"
	ac_cv_vsz_format="%*s %*s %*s %*s %*s %*s %d"
	ac_cv_rss_command="$PATH_TO_PS glaxen"
	ac_cv_rss_format="%*s %*s %*s %*s %*s %*s %*s %d"
	AC_MSG_RESULT([$ac_cv_ps_command])

dnl MacOSX / Darwin
dnl TODO: MacOSX has commands with spaces which will cause problems to PS_FORMAT
dnl STAT      VSZ    RSS   UID USER     PPID UCOMM            COMMAND
dnl Ss       1308    272     0 root        0 init             /sbin/init
elif ps waxo 'state vsz rss uid user ppid ucomm command' 2>/dev/null | \
	egrep -i ["^STAT +VSZ +RSS +UID +USER +PPID +UCOMM +COMMAND"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,procprog,&pos]"
	ac_cv_ps_raw_command="$PATH_TO_PS waxo 'state uid ppid command'"
	ac_cv_ps_command="$PATH_TO_PS waxo 'state uid ppid ucomm command'"
	ac_cv_ps_format="%s %d %d %s %n"
	ac_cv_vsz_command="$PATH_TO_PS waxco 'vsz command'"
	ac_cv_vsz_format="%d %s"
	ac_cv_rss_command="$PATH_TO_PS waxco 'rss command'"
	ac_cv_rss_format="%d %s"
	EXTRAS="$EXTRAS check_nagios"
	AC_MSG_RESULT([$ac_cv_ps_command])

dnl UnixWare 
elif ps -Al 2>/dev/null | \
	egrep -i ["^ *F +S +UID +PID +PPID +CLS +PRI +NI +C +ADDR +SZ +WCHAN +TTY +TIME +COMD"] >/dev/null
then
	ac_cv_use_ps_vars=yes
	ac_cv_ps_varlist="[procstat,&procuid,&procppid,&pos,procprog]"
	ac_cv_ps_command="$PATH_TO_PS -Al"
	ac_cv_ps_format="%*s %s %d %*s %d %*s %*s %*s %*s %*s %*s %*s %*s %*s %n%s"
	if ps -Ao 'vsz comm' 2>/dev/null | \
		egrep -i ["^ *VSZ +COMMAND"] >/dev/null
	then
		ac_cv_vsz_command="$PATH_TO_PS -Ao 'vsz comm'"
		ac_cv_vsz_format="%*s %d"
	fi
	AC_MSG_RESULT([$ac_cv_ps_command])

else
	AC_MSG_WARN([unable to find usable ps syntax])
fi

if test "x$ac_cv_use_ps_vars" != "xno"
then
	AC_DEFINE(USE_PS_VARS,1,[Define if 'ps' will be parsed with sscanf])
fi
AC_DEFINE_UNQUOTED(PS_VARLIST,$ac_cv_ps_varlist,
	[Variable list for sscanf of 'ps' output])
AC_DEFINE_UNQUOTED(PS_RAW_COMMAND,"$ac_cv_ps_raw_command",
	[Verbatim command to execute for ps in check_netsaint])
AC_DEFINE_UNQUOTED(PS_COMMAND,"$ac_cv_ps_command",
	[Verbatim command to execute for ps in check_procs])
AC_DEFINE_UNQUOTED(PS_FORMAT,"$ac_cv_ps_format",
	[Format string for scanning ps output in check_procs])
AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$ac_cv_vsz_command",
	[Verbatim command to execute for ps in check_vsz])
AC_DEFINE_UNQUOTED(VSZ_FORMAT,"$ac_cv_vsz_format",
	[Format string for scanning ps output in check_vsz])
AC_DEFINE_UNQUOTED(RSS_COMMAND,"$ac_cv_rss_command",
	[Verbatim command to execute for ps in check_rss])
AC_DEFINE_UNQUOTED(RSS_FORMAT,"$ac_cv_rss_format",
	[Format string for scanning ps output in check_rss])

AC_PATH_PROG(PATH_TO_DF,df)
AC_PATH_PROG(PATH_TO_BDF,bdf)

AC_ARG_WITH(df_command,
	ACX_HELP_STRING([--with-df-command=SYNTAX],
		[sets syntax for df]),
	ac_cv_df_command=$withval,)

AC_MSG_CHECKING(for df syntax)
if test -n "$ac_cv_df_command"
then
	AC_MSG_RESULT([$ac_cv_df_command])

elif df -Pk 2>/dev/null | egrep -i ["^(/dev/|[a-zA-Z]:)[a-z0-9/\\]+ +[0-9]+ +[0-9]+ +[0-9]+ +[0-9]+% +/[a-z0-9/\\]*"] >/dev/null
then
	ac_cv_df_command="$PATH_TO_DF -Pk"
	AC_MSG_RESULT([$ac_cv_df_command])

elif df -k 2>/dev/null | egrep -i ["^/dev/[a-z0-9/]+ +[0-9]+ +[0-9]+ +[0-9]+ +[0-9]+% +/[a-z0-9/]*"] >/dev/null
then
	ac_cv_df_command="$PATH_TO_DF -k"
	AC_MSG_RESULT([$ac_cv_df_command])

elif df 2>/dev/null | egrep -i ["^/dev/[a-z0-9/]+ +[0-9]+ +[0-9]+ +[0-9]+ +[0-9]+% +/[a-z0-9/]*"] >/dev/null
then
	ac_cv_df_command="$PATH_TO_DF"
	AC_MSG_RESULT([$ac_cv_df_command])

elif bdf 2>/dev/null | egrep -i ["^/dev/[a-z0-9/]+ +[0-9]+ +[0-9]+ +[0-9]+ +[0-9]+% +/[a-z0-9/]*"] >/dev/null
then
	ac_cv_df_command="$PATH_TO_BDF"
	AC_MSG_RESULT([$ac_cv_df_command])

else
	AC_MSG_WARN([unable to find usable df syntax])
fi

AC_DEFINE_UNQUOTED(DF_COMMAND,"$ac_cv_df_command",[path and args for df command])

AC_PATH_PROG(PATH_TO_PING,ping)
AC_PATH_PROG(PATH_TO_PING6,ping6)

AC_ARG_WITH(ping_command,
	ACX_HELP_STRING([--with-ping-command=SYNTAX],
		[sets syntax for ICMP ping]),
	ac_cv_ping_command=$withval,)

AC_MSG_CHECKING(for ICMP ping syntax)
ac_cv_ping_packets_first=no
if test -n "$ac_cv_ping_command"
then
	AC_MSG_RESULT([(command-line) $ac_cv_ping_command])
	if test -n "$ac_cv_ping_packets_first"
	then
		ac_cv_ping_packets_first=yes
		dnl AC_DEFINE_UNQUOTED(PING_PACKETS_FIRST,"$ac_cv_ping_command",
		dnl	[Define if packet count must precede host])
	fi

elif [[ "z$ac_cv_uname_s" = "zUnixWare" ]] && \
	$PATH_TO_PING -n -s 127.0.0.1 56 1 2>/dev/null | \
	egrep -i "^round-trip|^rtt" >/dev/null
then
        ac_cv_ping_command="$PATH_TO_PING -n -U -c %d %s"
	ac_cv_ping_packets_first=yes
	AC_MSG_RESULT([$ac_cv_ping_command])

elif $PATH_TO_PING -n -U -c 1 127.0.0.1 2>/dev/null | \
	egrep -i "^round-trip|^rtt" >/dev/null
then
        ac_cv_ping_command="$PATH_TO_PING -n -U -c %d %s"
	ac_cv_ping_packets_first=yes
	AC_MSG_RESULT([$ac_cv_ping_command])

elif $PATH_TO_PING -n -c 1 127.0.0.1 2>/dev/null | \
	egrep -i "^round-trip|^rtt" >/dev/null
then
	ac_cv_ping_command="$PATH_TO_PING -n -c %d %s"
	ac_cv_ping_packets_first=yes
	AC_MSG_RESULT([$ac_cv_ping_command])

elif $PATH_TO_PING -n 127.0.0.1 -c 1 2>/dev/null | \
	egrep -i "^round-trip|^rtt" >/dev/null
then
	ac_cv_ping_command="$PATH_TO_PING -n %s -c %d"
	AC_MSG_RESULT([$ac_cv_ping_command])

elif $PATH_TO_PING 127.0.0.1 -n 1 2>/dev/null | \
	egrep -i "^round-trip|^rtt" >/dev/null
then
	ac_cv_ping_command="$PATH_TO_PING %s -n %d"
	AC_MSG_RESULT([$ac_cv_ping_command])

elif $PATH_TO_PING -n -s 127.0.0.1 56 1 2>/dev/null | \
	egrep -i "^round-trip|^rtt" >/dev/null
then
	ac_cv_ping_command="$PATH_TO_PING -n -s %s 56 %d"
	AC_MSG_RESULT([$ac_cv_ping_command])

elif $PATH_TO_PING -n -h 127.0.0.1 -s 56 -c 1 2>/dev/null | \
	egrep -i "^round-trip|^rtt" >/dev/null
then
	ac_cv_ping_command="$PATH_TO_PING -n -h %s -s 56 -c %d"
	AC_MSG_RESULT([$ac_cv_ping_command])

elif $PATH_TO_PING -n -s 56 -c 1 127.0.0.1 2>/dev/null | \
	egrep -i "^round-trip|^rtt" >/dev/null
then
	ac_cv_ping_command="$PATH_TO_PING -n -s 56 -c %d %s"
	ac_cv_ping_packets_first=yes
	AC_MSG_RESULT([$ac_cv_ping_command])

elif $PATH_TO_PING -n -c 1 127.0.0.1 2>/dev/null | \
	egrep -i "^round-trip|^rtt" >/dev/null
then
	ac_cv_ping_command="$PATH_TO_PING -n -c %d %s"
	ac_cv_ping_packets_first=yes
	AC_MSG_RESULT([$ac_cv_ping_command])

else
	AC_MSG_WARN([unable to find usable ping syntax])
fi

AC_DEFINE_UNQUOTED(PING_COMMAND,"$ac_cv_ping_command",
	[path and args for ICMP ping command])

if test "x$ac_cv_ping_packets_first" != "xno"
then
	AC_DEFINE(PING_PACKETS_FIRST,1,
		[Define if packet count must precede host])
fi

AC_ARG_WITH(ping6_command,
	ACX_HELP_STRING([--with-ping6-command=SYNTAX],
		[sets syntax for ICMPv6 ping]),
	ac_cv_ping6_command=$withval,)

AC_MSG_CHECKING(for ICMPv6 ping syntax)
ac_cv_ping6_packets_first=no
if test -n "$ac_cv_ping6_command"
then
	AC_MSG_RESULT([(command-line) $ac_cv_ping6_command])
	if test -n "$ac_cv_ping6_packets_first"
	then
		ac_cv_ping6_packets_first=yes
	fi

elif test "x$PATH_TO_PING6" != "x"; then
	if [[ "z$ac_cv_uname_s" = "zUnixWare" ]] && \
		$PATH_TO_PING6 -n -s ::1 56 1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
        	ac_cv_ping6_command="$PATH_TO_PING6 -n -U -c %d %s"
		ac_cv_ping6_packets_first=yes
		AC_MSG_RESULT([$ac_cv_ping6_command])

	elif $PATH_TO_PING6 -n -U -c 1 ::1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
        	ac_cv_ping6_command="$PATH_TO_PING6 -n -U -c %d %s"
		ac_cv_ping6_packets_first=yes
		AC_MSG_RESULT([$ac_cv_ping6_command])

	elif $PATH_TO_PING6 -n -c 1 ::1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
		ac_cv_ping6_command="$PATH_TO_PING6 -n -c %d %s"
		ac_cv_ping6_packets_first=yes
		AC_MSG_RESULT([$ac_cv_ping6_command])

	elif $PATH_TO_PING6 -n ::1 -c 1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
		ac_cv_ping6_command="$PATH_TO_PING6 -n %s -c %d"
		AC_MSG_RESULT([$ac_cv_ping6_command])

	elif $PATH_TO_PING6 ::1 -n 1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
		ac_cv_ping6_command="$PATH_TO_PING6 %s -n %d"
		AC_MSG_RESULT([$ac_cv_ping6_command])

	elif $PATH_TO_PING6 -n -s ::1 56 1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
		ac_cv_ping6_command="$PATH_TO_PING6 -n -s %s 56 %d"
		AC_MSG_RESULT([$ac_cv_ping6_command])

	elif $PATH_TO_PING6 -n -h ::1 -s 56 -c 1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
		ac_cv_ping6_command="$PATH_TO_PING6 -n -h %s -s 56 -c %d"
		AC_MSG_RESULT([$ac_cv_ping6_command])

	elif $PATH_TO_PING6 -n -s 56 -c 1 ::1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
		ac_cv_ping_command="$PATH_TO_PING6 -n -s 56 -c %d %s"
		ac_cv_ping_packets_first=yes
		AC_MSG_RESULT([$ac_cv_ping_command])

	elif $PATH_TO_PING6 -n -c 1 ::1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
		ac_cv_ping6_command="$PATH_TO_PING6 -n -c %d %s"
		ac_cv_ping6_packets_first=yes
		AC_MSG_RESULT([$ac_cv_ping6_command])

	fi

elif test "x$PATH_TO_PING" != "x"; then
	if [[ "z$ac_cv_uname_s" = "zUnixWare" ]] && \
		$PATH_TO_PING -A inet6 -n -s ::1 56 1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
        	ac_cv_ping6_command="$PATH_TO_PING -A inet6 -n -U -c %d %s"
		ac_cv_ping6_packets_first=yes
		AC_MSG_RESULT([$ac_cv_ping6_command])

	elif $PATH_TO_PING -A inet6 -n -U -c 1 ::1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
        	ac_cv_ping6_command="$PATH_TO_PING -A inet6 -n -U -c %d %s"
		ac_cv_ping6_packets_first=yes
		AC_MSG_RESULT([$ac_cv_ping6_command])

	elif $PATH_TO_PING -A inet6 -n -c 1 ::1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
		ac_cv_ping6_command="$PATH_TO_PING -A inet6 -n -c %d %s"
		ac_cv_ping6_packets_first=yes
		AC_MSG_RESULT([$ac_cv_ping6_command])

	elif $PATH_TO_PING -A inet6 -n ::1 -c 1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
		ac_cv_ping6_command="$PATH_TO_PING -A inet6 -n %s -c %d"
		AC_MSG_RESULT([$ac_cv_ping6_command])

	elif $PATH_TO_PING -A inet6 ::1 -n 1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
		ac_cv_ping6_command="$PATH_TO_PING -A inet6 %s -n %d"
		AC_MSG_RESULT([$ac_cv_ping6_command])

	elif $PATH_TO_PING -A inet6 -n -s ::1 56 1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
		ac_cv_ping6_command="$PATH_TO_PING -A inet6 -n -s %s 56 %d"
		AC_MSG_RESULT([$ac_cv_ping6_command])

	elif $PATH_TO_PING -A inet6 -n -h ::1 -s 56 -c 1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
		ac_cv_ping6_command="$PATH_TO_PING -A inet6 -n -h %s -s 56 -c %d"
		AC_MSG_RESULT([$ac_cv_ping6_command])

	elif $PATH_TO_PING -A inet6 -n -s 56 -c 1 ::1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
		ac_cv_ping_command="$PATH_TO_PING -A inet6 -n -s 56 -c %d %s"
		ac_cv_ping_packets_first=yes
		AC_MSG_RESULT([$ac_cv_ping_command])

	elif $PATH_TO_PING -A inet6 -n -c 1 ::1 2>/dev/null | \
		egrep -i "^round-trip|^rtt" >/dev/null
	then
		ac_cv_ping6_command="$PATH_TO_PING -A inet6 -n -c %d %s"
		ac_cv_ping6_packets_first=yes
		AC_MSG_RESULT([$ac_cv_ping6_command])

	fi

fi

if test "x$ac_cv_ping6_command" != "x"; then
	AC_DEFINE_UNQUOTED(PING6_COMMAND,"$ac_cv_ping6_command",
		[path and args for ICMPv6 ping command])
else
	AC_MSG_RESULT([none])
fi

if test "x$ac_cv_ping6_packets_first" != "xno"; then
	AC_DEFINE(PING6_PACKETS_FIRST,1,
		[Define if packet count must precede host])
fi

AC_PATH_PROG(PATH_TO_NSLOOKUP,nslookup)

AC_MSG_CHECKING(for nslookup syntax)
if test -n "$PATH_TO_NSLOOKUP"
then
	if $PATH_TO_NSLOOKUP -sil 127.0.0.1 2>&1 | grep ["Invalid option: sil"] >/dev/null
	then
		ac_cv_nslookup_command="$PATH_TO_NSLOOKUP"
		AC_MSG_RESULT([$ac_cv_nslookup_command])

	else
		ac_cv_nslookup_command="$PATH_TO_NSLOOKUP -sil"
		AC_MSG_RESULT([$ac_cv_nslookup_command])

	fi
	EXTRAS="$EXTRAS check_dns"

else
	AC_MSG_WARN([nslookup command not found])
fi

AC_DEFINE_UNQUOTED(NSLOOKUP_COMMAND,"$ac_cv_nslookup_command",
	[path and args for nslookup])

AC_PATH_PROG(PATH_TO_HOST,host)
if test -n "$ac_cv_path_PATH_TO_HOST"
then
	EXTRAS="$EXTRAS check_dns"
fi

AC_PATH_PROG(PATH_TO_UPTIME,uptime)
AC_DEFINE_UNQUOTED(PATH_TO_UPTIME,"$PATH_TO_UPTIME",[path to uptime binary])

AC_PATH_PROG(PATH_TO_RPCINFO,rpcinfo)
AC_DEFINE_UNQUOTED(PATH_TO_RPCINFO,"$PATH_TO_RPCINFO",[path to rpcinfo binary])

AC_PATH_PROG(PATH_TO_NTPDATE,ntpdate)
AC_PATH_PROGS(PATH_TO_NTPDC,ntpdc xntpdc)
AC_PATH_PROGS(PATH_TO_NTPQ,ntpq)
if (test -x "$PATH_TO_NTPDATE" || test -x "$PATH_TO_NTPQ")
then
	AC_DEFINE_UNQUOTED(PATH_TO_NTPQ,"$PATH_TO_NTPQ",[path to ntpq binary])
	AC_DEFINE_UNQUOTED(PATH_TO_NTPDATE,"$PATH_TO_NTPDATE",[path to ntpdate binary])
else
	AC_MSG_WARN([Install NTP programs (http://www.ntp.org) if you want to monitor time synchronization])
fi

AC_PATH_PROG(PATH_TO_LMSTAT,lmstat)
if test -x "$PATH_TO_LMSTAT"
then
	AC_DEFINE_UNQUOTED(PATH_TO_LMSTAT,"$PATH_TO_LMSTAT",[path to lmstat])
else
	AC_MSG_WARN([Get lmstat from Globetrotter Software to monitor flexlm licenses])
fi

AC_PATH_PROG(PATH_TO_SMBCLIENT,smbclient)
if test -x "$PATH_TO_SMBCLIENT"
then
	AC_DEFINE_UNQUOTED(PATH_TO_SMBCLIENT,"$PATH_TO_SMBCLIENT",[path to smbclient binary])
else
	AC_MSG_WARN([Get smbclient from Samba.org to monitor SMB shares])
fi


AC_PATH_PROG(PATH_TO_WHO,who)

if [$PATH_TO_WHO -q 2>/dev/null | egrep -i "^# users=[0-9]+$" >/dev/null]
then
	ac_cv_path_to_who="$PATH_TO_WHO -q"
else
	ac_cv_path_to_who="$PATH_TO_WHO"
fi

AC_DEFINE_UNQUOTED(WHO_COMMAND,"$ac_cv_path_to_who",
	[path and arguments for invoking 'who'])

AC_PATH_PROG(PATH_TO_SNMPGET,snmpget)
if test -x "$PATH_TO_SNMPGET"
then
	AC_DEFINE_UNQUOTED(PATH_TO_SNMPGET,"$PATH_TO_SNMPGET",[path to snmpget binary])
	EXTRAS="$EXTRAS check_hpjd check_snmp"
else
	AC_MSG_WARN([Get snmpget from http://net-snmp.sourceforge.net to make check_hpjd and check_snmp plugins])
fi

AC_PATH_PROG(PATH_TO_SNMPGETNEXT,snmpgetnext)
if test -x "$PATH_TO_SNMPGETNEXT"
then
	AC_DEFINE_UNQUOTED(PATH_TO_SNMPGETNEXT,"$PATH_TO_SNMPGETNEXT",[path to snmpgetnext binary])
fi

if ( $PERL -M"Net::SNMP 3.6" -e 'exit' 2>/dev/null  )
then
	AC_MSG_CHECKING(for Net::SNMP perl module)
	AC_MSG_RESULT([found])
else
	AC_MSG_WARN([Tried $PERL - install Net::SNMP perl module if you want to use the perl snmp plugins])
fi

AC_PATH_PROG(PATH_TO_QUAKESTAT,quakestat)
AC_PATH_PROG(PATH_TO_QSTAT,qstat)

if test -x "$PATH_TO_QUAKESTAT"
then
	ac_cv_path_to_qstat="$PATH_TO_QUAKESTAT"
	EXTRAS="$EXTRAS check_game"

elif test -x "$PATH_TO_QSTAT"
then
	ac_cv_path_to_qstat="$PATH_TO_QSTAT"
	EXTRAS="$EXTRAS check_game"
else
	AC_MSG_WARN([Get qstat from http://www.activesw.com/people/steve/qstat.html in order to make check_game plugin])
fi

if test $ac_cv_path_to_qstat 
then
	AC_DEFINE_UNQUOTED(PATH_TO_QSTAT,"$ac_cv_path_to_qstat",
		[path to qstat/quakestat])
fi

AC_PATH_PROG(PATH_TO_FPING,fping)
if test -x "$PATH_TO_FPING"
then
	AC_DEFINE_UNQUOTED(PATH_TO_FPING,"$PATH_TO_FPING",[path to fping])
	EXTRAS="$EXTRAS check_fping"
else
	AC_MSG_WARN([Get fping from http://www.fping.com in order to make check_fping plugin])
fi

AC_PATH_PROG(PATH_TO_SSH,ssh)

if test -x "$PATH_TO_SSH"
then
	AC_DEFINE_UNQUOTED(SSH_COMMAND,"$PATH_TO_SSH",[path to ssh binary])
	EXTRAS="$EXTRAS check_by_ssh"
else
	AC_MSG_WARN([Get ssh in order to make check_by_ssh plugin])
fi


AC_PATH_PROG(PATH_TO_MAILQ,mailq)
if test -x "$PATH_TO_MAILQ"
then
	AC_DEFINE_UNQUOTED(PATH_TO_MAILQ,"$PATH_TO_MAILQ",[path to mailq])
else
	AC_MSG_WARN([Could not find mailq or eqivalent])
fi

dnl SWAP info required is amount allocated/available and amount free
dnl The plugin works through all the swap devices and adds up the total swap
dnl available.

dnl dunno why this does not work below - use hack (kbd)
dnl fine on linux, broken on solaris
dnl if /bin/test -e "/proc/meminfo"

AC_PATH_PROG(PATH_TO_SWAP,swap)
AC_PATH_PROG(PATH_TO_SWAPINFO,swapinfo)

AC_MSG_CHECKING(for how to check memory)
if [cat /proc/meminfo > /dev/null 2>&1]
then
	AC_MSG_RESULT([found /proc/meminfo])
	AC_DEFINE(HAVE_PROC_MEMINFO,1,[Define if we have /proc/meminfo])
	AC_DEFINE_UNQUOTED(PROC_MEMINFO,"/proc/meminfo",[path to /proc/meminfo if name changes])
	EXTRAS="$EXTRAS check_swap"

elif [$PATH_TO_SWAP -l 2>&1 >/dev/null]
then
	ac_cv_have_swap=yes
	ac_cv_swap_command="$PATH_TO_SWAP -l"
	if [$PATH_TO_SWAP -l 2>/dev/null | \
		egrep -i "^lswap +path +pri +swaplo +blocks +free +maxswap" \
		>/dev/null]
	then
		ac_cv_swap_format=[" %*d %*s %*d,%*d %*d %*d %d %d"]
		AC_MSG_RESULT([using IRIX format swap])

	elif [$PATH_TO_SWAP -l 2>/dev/null | egrep -i "^swapfile +dev +swaplo +blocks +free" >/dev/null]
	then
		ac_cv_swap_format=["%*s %*[[0-9,-]] %*d %d %d"]
		AC_MSG_RESULT([using Solaris format swap])

	elif [$PATH_TO_SWAP -l 2>/dev/null | egrep -i "^path +dev +swaplo +blocks +free" >/dev/null]
	then
		ac_cv_swap_format=["%*s %*[[0-9,-]] %*d %d %d"]
		AC_MSG_RESULT([using Unixware format swap])

	fi
	EXTRAS="$EXTRAS check_swap"

elif [$PATH_TO_SWAPINFO -k 2>&1 | egrep -i "^Device" >/dev/null]
then
	ac_cv_have_swap=yes
	ac_cv_swap_command="$PATH_TO_SWAPINFO -k"

	if [$PATH_TO_SWAPINFO -k 2>/dev/null | egrep -i "^Device +1K-blocks +Used +Avail" >/dev/null]
	then
		ac_cv_swap_format=["%*s %d %*d %d"]
		AC_MSG_RESULT([using FreeBSD format swapinfo])
	fi
	EXTRAS="$EXTRAS check_swap"

elif [$PATH_TO_SWAPINFO -dfM 2>/dev/null | egrep -i "^TYPE +AVAIL +USED +FREE" >/dev/null]
then
	ac_cv_have_swap=yes
	ac_cv_swap_command="$PATH_TO_SWAPINFO -dfM",
	ac_cv_swap_format=["%*s %d %*d %d"]
	AC_MSG_RESULT([using HP-UX format swapinfo])
fi

if test x$ac_cv_have_swap != x 
then
	AC_DEFINE(HAVE_SWAP,1,[Define if swap/swapinfo command is found])
fi
AC_DEFINE_UNQUOTED(SWAP_FORMAT,"$ac_cv_swap_format",
	[Format string for parsing swap output])
if test "x$ac_cv_swap_command" != "x" 
then
	AC_DEFINE_UNQUOTED(SWAP_COMMAND,"$ac_cv_swap_command",
		[Path to swap/swapinfo binary, with any args])
fi

AC_PATH_PROG(PATH_TO_DIG,dig)
AC_DEFINE_UNQUOTED(PATH_TO_DIG,"$PATH_TO_DIG",[Path to dig command, if present])
if test -n "$PATH_TO_DIG"; then
	EXTRAS="$EXTRAS check_dig"
fi

if test -f plugins/check_nt.c ; then
  EXTRAS="$EXTRAS check_nt"
elif test -f ../plugins/check_nt.c ; then
  EXTRAS="$EXTRAS check_nt"
fi

AC_MSG_CHECKING(for va_list)
AC_TRY_COMPILE([#ifdef __STDC__
		#include <stdio.h>
		#include <stdlib.h>
		#include <stdarg.h>
		#else
		#include <sys/types.h>
		#include <stdio.h>
		#include <varargs.h>
		#endif],
		[va_list args;],
		[AC_MSG_RESULT(yes)],
		[NEED_VA_LIST=-DNEED_VA_LIST AC_SUBST(NEED_VA_LIST) AC_MSG_RESULT(no)])

AC_SUBST(EXTRAS)
AC_SUBST(DEPLIBS)

AC_DEFINE_UNQUOTED(PACKAGE_VERSION,"${VERSION}",[package version])

AC_OUTPUT(Makefile subst lib/Makefile plugins/Makefile plugins-scripts/Makefile plugins-scripts/subst plugins-scripts/utils.pm plugins-scripts/utils.sh command.cfg test.pl,echo timestamp > plugins/stamp-h1;echo timestamp > plugins/stamp-h2;echo timestamp > plugins/stamp-h3;echo timestamp > plugins/stamp-h4;echo timestamp > plugins/stamp-h5;echo timestamp > plugins/stamp-h6;PATH=.:..:$PATH subst.sh command.cfg)
