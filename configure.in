dnl Process this file with autoconf to produce a configure script.
include(`aclocal.m4')
AC_REVISION ($Revision$)
AC_INIT(Helper.pm)
PACKAGE_VERSION="1.3.0"
AC_SUBST(PACKAGE_VERSION)
PACKAGE_RELEASE="alpha1"
AC_SUBST(PACKAGE_RELEASE)
AM_INIT_AUTOMAKE(nagios-plugins,${PACKAGE_VERSION}-${PACKAGE_RELEASE})
AM_CONFIG_HEADER(plugins/config.h plugins/common.h plugins/version.h plugins/netutils.h plugins/utils.h plugins/popen.h)

AC_PREFIX_DEFAULT(/usr/local/nagios)

dnl Figure out how to invoke "install" and what install options to use.

AC_PROG_INSTALL
AC_SUBST(INSTALL)

AC_PROG_RANLIB

AC_PATH_PROG(ACLOCAL,aclocal)
AC_PATH_PROG(AUTOMAKE,automake)
AC_PATH_PROG(AUTOCONF,autoconf)
AC_PATH_PROG(AUTOHEADER,autoheader)

PLUGIN_TEST=`echo $srcdir/plugins/t/*.t|sed -e 's,\.*/plugins/,,g'`
AC_SUBST(PLUGIN_TEST)dnl

SCRIPT_TEST=`echo $srcdir/plugins-scripts/t/*.t|sed -e 's,\.*/plugins-scripts/,,g'`
AC_SUBST(SCRIPT_TEST)dnl

WARRANTY="The nagios plugins come with ABSOLUTELY NO WARRANTY. You may redistribute\ncopies of the plugins under the terms of the GNU General Public License.\nFor more information about these matters, see the file named COPYING.\n"
AC_SUBST(WARRANTY)

SUPPORT="Send email to nagios-users@lists.sourceforge.net if you have questions\nregarding use of this software. To submit patches or suggest improvements,\nsend email to nagiosplug-devel@lists.sourceforge.net\n"
AC_SUBST(SUPPORT)

AC_ARG_PROGRAM

dnl AC_ARG_WITH(nonposix_state_defs,--with-nonposix-state-defs uses POSIXLY incorrect states for netsaint < 0.0.7b2,,AC_DEFINE(POSIX_STATE_DEFS))

dnl CGIURL has changed for Nagios with 1.0 beta
AC_ARG_WITH(cgiurl,--with-cgiurl=<dir> sets URL for cgi programs,cgiurl=$withval,cgiurl=/nagios/cgi-bin)
CGIURL="$cgiurl"
AC_DEFINE_UNQUOTED(CGIURL,"$CGIURL")

AC_ARG_WITH(nagios_user,--with-nagios-user=<user> sets user name to run nagios,nagios_usr=$withval,nagios_usr=nagios)
AC_ARG_WITH(nagios_group,--with-nagios-group=<group> sets group name to run nagios,nagios_grp=$withval,nagios_grp=nagios)
AC_SUBST(nagios_usr)
AC_SUBST(nagios_grp)
INSTALL_OPTS="-o $nagios_usr -g $nagios_grp"
AC_SUBST(INSTALL_OPTS)

AC_ARG_WITH(trusted_path,--with-trusted-path=/bin:/sbin:/usr/bin:/usr/sbin sets trusted path for executables called by scripts,trusted_path=$withval,trusted_path=/bin:/sbin:/usr/bin:/usr/sbin)
AC_SUBST(trusted_path)

EXTRAS=
dnl PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/etc:/usr/local/bin:/usr/local/sbin:$PATH

LDFLAGS="$LDFLAGS -L."

dnl Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PROG_AWK

AC_PATH_PROG(PYTHON,python)
AC_PATH_PROG(PERL,perl)
AC_PATH_PROG(SH,sh)

AC_PATH_PROG(HOSTNAME,hostname)
AC_PATH_PROG(BASENAME,basename)


dnl
dnl Checks for libraries.
dnl

AC_FUNC_GETLOADAVG

AC_CHECK_LIB(dce,main,SOCKETLIBS="$SOCKETLIBS -ldce")
AC_CHECK_LIB(nsl,main,SOCKETLIBS="$SOCKETLIBS -lnsl")
AC_CHECK_LIB(socket,socket,SOCKETLIBS="$SOCKETLIBS -lsocket")
AC_CHECK_LIB(resolv,main,SOCKETLIBS="$SOCKETLIBS -lresolv")
AC_SUBST(SOCKETLIBS)

dnl Check for PostgreSQL libraries
_SAVEDLIBS="$LIBS"
_SAVEDCPPFLAGS="$CPPFLAGS"
AC_ARG_WITH(pgsql,--with-pgsql=<dir> sets path to pgsql installation,[PGSQL=$withval])
AC_CHECK_LIB(crypt,main)
if test "$ac_cv_lib_crypt_main" = "yes"; then
  if test -n "$PGSQL"; then
    LIBS="$LIBS -L$PGSQL/lib"
    CPPFLAGS="$CPPFLAGS -I$PGSQL/include"
  fi
  AC_CHECK_LIB(pq,PQsetdbLogin,,,-lcrypt)
  if test "$ac_cv_lib_pq_PQsetdbLogin" = "yes"; then
    AC_CHECK_HEADERS(pgsql/libpq-fe.h)
    AC_CHECK_HEADERS(postgresql/libpq-fe.h)
    AC_CHECK_HEADERS(libpq-fe.h)
    if test  "$ac_cv_header_pgsql_libpq_fe_h" = "yes"; then
      PGLIBS="-lpq -lcrypt"
      PGINCLUDE="-I/usr/include/pgsql"
    elif test  "$ac_cv_header_postgresql_libpq_fe_h" = "yes"; then
      PGLIBS="-L$PGSQL/lib -lpq -lcrypt"
      PGINCLUDE="-I/usr/include/postgresql"
    elif test  "$ac_cv_header_libpq_fe_h" = "yes"; then
      PGLIBS="-L$PGSQL/lib -lpq -lcrypt"
      PGINCLUDE="-I$PGSQL/include"
    fi
    if test -z "$PGINCLUDE"; then
      AC_MSG_WARN([Skipping PostgreSQL plugin (check_pgsql)])
      AC_MSG_WARN([install PostgreSQL headers to compile this plugin (see Requirements).])
    else
      AC_SUBST(PGLIBS)
      AC_SUBST(PGINCLUDE)
      EXTRAS="$EXTRAS check_pgsql"
    fi
  else
    AC_MSG_WARN([Skipping PostgreSQL plugin (check_pgsql)])
    AC_MSG_WARN([LIBS="$LIBS" CPPFLAGS="$CPPFLAGS"])
    AC_MSG_WARN([install PostgreSQL libs to compile this plugin (see Requirements).])
  fi
else
  AC_MSG_WARN([Skipping PostgreSQL plugin (check_pgsql)])
  AC_MSG_WARN([install lib crypt and PostgreSQL libs to compile this plugin (see Requirements).])
fi
LIBS="$_SAVEDLIBS"
CPPFLAGS="$_SAVEDCPPFLAGS"

dnl Check for radius libraries
_SAVEDLIBS="$LIBS"
AC_CHECK_LIB(radiusclient,rc_read_config)
if test "$ac_cv_lib_radiusclient_rc_read_config" = "yes"; then
  EXTRAS="$EXTRAS check_radius"
	RADIUSLIBS="-lradiusclient"
  AC_SUBST(RADIUSLIBS)
else
  AC_MSG_WARN([Skipping radius plugin])
  AC_MSG_WARN([install radius libs to compile this plugin (see Requirements).])
fi
LIBS="$_SAVEDLIBS"

dnl Check for LDAP libraries
_SAVEDLIBS="$LIBS"
AC_CHECK_LIB(ldap,main,,,-llber)
if test "$ac_cv_lib_ldap_main" = "yes"; then
  LDAPLIBS="-lldap -llber"\
  LDAPINCLUDE="-I/usr/include/ldap"
  AC_SUBST(LDAPLIBS)
  AC_SUBST(LDAPINCLUDE)
  EXTRAS="$EXTRAS check_ldap"
else
  AC_MSG_WARN([Skipping LDAP plugin])
  AC_MSG_WARN([install LDAP libs to compile this plugin (see Requirements).])
fi
LIBS="$_SAVEDLIBS"


dnl Check for mysql libraries
_SAVEDLIBS="$LIBS"
_SAVEDCPPFLAGS="$CPPFLAGS"
dnl CPPFLAGS="-I/usr/include"

AC_ARG_WITH(mysql,--with-mysql=<dir> sets path to mysql installation (assumes lib/mysql and include subdirs),[MYSQL=$withval])
if test -n "$MYSQL"; then
  MYSQLLIBDIR=$MYSQL/lib/mysql
  CPPFLAGS="-I$MYSQL/include"
  AC_CHECK_LIB(mysqlclient,mysql_init,MYSQLLIBS="-lmysqlclient -lz" check_mysql_LDFLAGS="-L$MYSQLLIBDIR ",,-L$MYSQLLIBDIR -lz)
  AC_CHECK_LIB(mysqlclient,mysql_close,MYSQLLIBS="-lmysqlclient")
elif test -f /usr/lib/libmysqlclient.so; then
  AC_CHECK_LIB(mysqlclient,mysql_init,MYSQLLIBS="-lmysqlclient -lz",,-lz)
  AC_CHECK_LIB(mysqlclient,mysql_close,MYSQLLIBS="-lmysqlclient")
elif test -f /usr/lib/libmysqlclient.a; then
  AC_CHECK_LIB(mysqlclient,mysql_init,MYSQLLIBS="-lmysqlclient -lz",,-lz)
  AC_CHECK_LIB(mysqlclient,mysql_close,MYSQLLIBS="-lmysqlclient")
elif test -f /usr/lib/mysql/libmysqlclient.so; then
  AC_CHECK_LIB(mysqlclient,mysql_init,MYSQLLIBS="-lmysqlclient -lz" check_mysql_LDFLAGS="-L/usr/lib/mysql",,-L/usr/lib/mysql -lz)
  AC_CHECK_LIB(mysqlclient,mysql_close,MYSQLLIBS="-lmysqlclient" check_mysql_LDFLAGS="-L/usr/lib/mysql",,-L/usr/lib/mysql)
elif test -f /usr/lib/mysql/libmysqlclient.a; then
  AC_CHECK_LIB(mysqlclient,mysql_init,MYSQLLIBS="-lmysqlclient -lz" check_mysql_LDFLAGS="-L/usr/lib/mysql",,-L/usr/lib/mysql -lz)
  AC_CHECK_LIB(mysqlclient,mysql_close,MYSQLLIBS="-lmysqlclient" check_mysql_LDFLAGS="-L/usr/lib/mysql",,-L/usr/lib/mysql)
fi
if test "$ac_cv_lib_mysqlclient_mysql_init" = "yes" -o "$ac_cv_lib_mysqlclient_mysql_close" = "yes"; then
  AC_CHECK_HEADERS(mysql/mysql.h mysql/errmsg.h, MYSQLINCLUDE="-I$MYSQL/include" )
  if test "$ac_cv_header_mysql_mysql_h" = "yes" -a "$ac_cv_header_mysql_errmsg_h" = "yes"; then
    EXTRAS="$EXTRAS check_mysql"
	CPPFLAGS="$_SAVEDCPPFLAGS -I$MYSQL/include"
    AC_SUBST(MYSQLLIBS)
    AC_SUBST(check_mysql_LDFLAGS)
  else
    AC_MSG_WARN([Skipping mysql plugin])
    AC_MSG_WARN([install mysql client headers to compile this plugin (see Requirements).])
    CPPFLAGS="$_SAVEDCPPFLAGS"
  fi
else
  AC_MSG_WARN([Skipping mysql plugin])
  AC_MSG_WARN([install mysql client libs to compile this plugin (see Requirements).])
  CPPFLAGS="$_SAVEDCPPFLAGS"
fi
LIBS="$_SAVEDLIBS"

dnl Check for OpenSSL location
AC_PATH_PROG(OPENSSL,openssl)
if test "$OPENSSL" = "/usr/bin/openssl"; then
  OPENSSL=/usr
elif test "$OPENSSL" = "/usr/sbin/openssl"; then
  OPENSSL=/usr
elif test "$OPENSSL" = "/opt/bin/openssl"; then
  OPENSSL=/opt
elif test "$OPENSSL" = "/opt/openssl/bin/openssl"; then
  OPENSSL=/opt/openssl
elif test "$OPENSSL" = "/usr/slocal/bin/openssl"; then
  OPENSSL=/usr/slocal
elif test "$OPENSSL" = "/usr/local/bin/openssl"; then
  OPENSSL=/usr/local
elif test "$OPENSSL" = "/usr/local/ssl/bin/openssl"; then
  OPENSSL=/usr/local/ssl
fi
AC_ARG_WITH(openssl,--with-openssl=<dir> sets path to openssl installation,[OPENSSL=$withval])

dnl Check for OpenSSL header files
_SAVEDCPPFLAGS="$CPPFLAGS"
FOUNDINCLUDE=yes
CPPFLAGS="-I$OPENSSL/include"
AC_CHECK_HEADERS(openssl/x509.h openssl/ssl.h openssl/rsa.h openssl/pem.h openssl/crypto.h openssl/err.h,SSLINCLUDE="-I$OPENSSL/include",FOUNDINCLUDE=no)
if test "$FOUNDINCLUDE" = "no"; then
  FOUNDINCLUDE=yes
  AC_CHECK_HEADERS(x509.h ssl.h rsa.h pem.h crypto.h err.h,SSLINCLUDE="-I$OPENSSL/include",FOUNDINCLUDE=no)
fi
AC_SUBST(SSLINCLUDE)
CPPFLAGS="$_SAVEDCPPFLAGS $SSLINCLUDE"

dnl Check for crypto lib
_SAVEDLIBS="$LIBS"
AC_CHECK_LIB(crypto,CRYPTO_lock,,,-L$OPENSSL/lib)
if test "$ac_cv_lib_crypto_CRYPTO_lock" = "yes"; then
  dnl Check for SSL lib
  AC_CHECK_LIB(ssl,main,LDFLAGS="$LDFLAGS -L$OPENSSL/lib" SSLLIBS="-lssl -lcrypto",AC_CHECK_LIB(ssl,main,LDFLAGS="$LDFLAGS -L$OPENSSL/lib" SSLLIBS="-lssl -lcrypto"),-L$OPENSSL/lib -lcrypto)
fi
LIBS="$_SAVEDLIBS"

dnl test headers and libs to decide whether check_http should use SSL
if test "$ac_cv_lib_crypto_CRYPTO_lock" = "yes"; then
  if test "$ac_cv_lib_ssl_main" = "yes"; then
    if test "$FOUNDINCLUDE" = "yes"; then
      AC_SUBST(SSLLIBS)
      AC_DEFINE(HAVE_SSL)
    fi
  fi
fi
CPPFLAGS="$_SAVEDCPPFLAGS"

dnl
dnl Checks for header files.
dnl

AC_HEADER_STDC
AC_HEADER_TIME
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(signal.h strings.h string.h syslog.h unistd.h uio.h errno.h regex.h sys/types.h sys/time.h sys/socket.h sys/loadavg.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_STRUCT_TM
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL

dnl EXTRA_LIBRARIES="libgetopt.a libsnprintf.a"
dnl noinst_LIBRARIES="libgetopt.a libsnprintf.a"
dnl libgetopt_a_SOURCES="getopt.c getopt1.c"
dnl libgetopt_a_DEPENDENCIES=getopt.h
dnl libsnprintf_a_SOURCES=snprintf.c
dnl AC_SUBST(noinst_LIBRARIES)
dnl AC_SUBST(libgetopt_a_SOURCES)
dnl AC_SUBST(libgetopt_a_DEPENDENCIES)
dnl AC_SUBST(libsnprintf_a_SOURCES)

AC_MSG_CHECKING(for getopt_long)
AC_TRY_COMPILE([#include <getopt.h>
#include <stdlib.h>],
[int option_index=0;
static struct option *long_options;
getopt_long(0,NULL,"+h",long_options,&option_index);],
[AC_DEFINE(HAVE_GETOPT_H) AC_DEFINE(HAVE_GETOPT_LONG) AC_MSG_RESULT(yes)],
[AC_DEFINE(HAVE_GETOPT_H) AC_DEFINE(HAVE_GETOPT_LONG) AC_MSG_RESULT(no) import_sources=getopt])

AC_CHECK_FUNCS(getopt_long_only,,LIBS="$LIBS -lgetopt" DEPLIBS="$DEPLIBS libgetopt.a")

AC_CHECK_FUNC(vsnprintf,,LIBS="$LIBS -lsnprintf" DEPLIBS="$DEPLIBS libsnprintf.a")

dnl Checks for library functions.
AC_CHECK_FUNCS(select socket strdup strstr strtod strtol strtoul)

AC_MSG_CHECKING(for type of socket size)
AC_TRY_COMPILE([#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
],
[int a = send(1, (const void *) buffer, (size_t *) 0, (int *) 0);],
[AC_DEFINE(SOCKET_SIZE_TYPE, size_t) AC_MSG_RESULT(size_t)],
[AC_DEFINE(SOCKET_SIZE_TYPE, int) AC_MSG_RESULT(int)])

if test -f "/proc/loadavg"
then
  AC_DEFINE(HAVE_PROC_LOADAVG)
  AC_DEFINE_UNQUOTED(PROC_LOADAVG,"/proc/loadavg")
fi

AC_PATH_PROG(PATH_TO_PS,ps)
dnl OpenBSD (needs to come early because -exo appears to work, but does not give all procs)
dnl  STAT UCOMM              VSZ   RSS USER       UID  PPID COMMAND
if [ps -axo 'stat comm vsz rss user uid ppid args' 2>/dev/null | egrep -i "^ *S[TAUES]* +[UCOMDNA]+ +[VSIZE]+ +R[S]+ +U[SER]+ +U[ID]+ +P[PID]+ +[RGSCOMDNA]+" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_VARLIST,[procstat,&procuid,&procppid,procprog,&pos])
	AC_DEFINE_UNQUOTED(PS_RAW_COMMAND,"$PATH_TO_PS -axo 'stat user ppid args'")
	EXTRAS="$EXTRAS check_nagios"
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS -axo 'stat uid ppid comm args'")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%s %d %d %s %n")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS -axo 'vsz comm'")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%d %s")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS -axo 'rss comm'")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%d %s")
  echo "      ps syntax... $PATH_TO_PS -axo 'stat comm vsz rss user ppid args'"
dnl AIX 4.3.3 - needs verification.
elif [ps -ao 'stat comm vsz rss user uid ppid args' 2>/dev/null | egrep -i "^ *S[TAUES]* +[UCOMDNA]+ +[VSIZE]+ +R[S]+ +U[SER]+ +U[ID]+ +P[PID]+ +[RGSCOMDNA]+" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_VARLIST,[procstat,&procuid,&procppid,procprog,&pos])
	AC_DEFINE_UNQUOTED(PS_RAW_COMMAND,"$PATH_TO_PS -ao 'stat user ppid args'")
	EXTRAS="$EXTRAS check_nagios"
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS -ao 'stat uid ppid comm args'")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%s %d %d %s %n")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS -ao 'vsz comm'")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%d %s")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS -ao 'rss comm'")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%d %s")
  echo "      ps syntax... $PATH_TO_PS -ao 'stat comm vsz rss user ppid args'"
elif [ps -eo 's comm vsz rss user uid ppid args' 2>/dev/null | egrep -i "^S[TAUES]* +C[OMDNA]+ +[VSIZE]+ +U[SER]+ +U[ID]+ +P[PID]+ +[RGSCOMDNA]+" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_VARLIST,[procstat,&procuid,&procppid,procprog,&pos])
	AC_DEFINE_UNQUOTED(PS_RAW_COMMAND,"$PATH_TO_PS -eo 's user ppid args'")
	EXTRAS="$EXTRAS check_nagios"
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS -eo 's uid ppid comm args'")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%s %d %d %s %n")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS -eo 'vsz comm'")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%d %s")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS -eo 'rss comm'")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%d %s")
        echo "      ps syntax... $PATH_TO_PS -eo 's  comm vsz rss user ppid args'"
elif [ps -Ao 's comm vsz rss uid user ppid args' 2>/dev/null | egrep -i "^S[TAUES]* +C[OMDNA]+ +V[SIZE]+ +RSS +UID +USER +PPID +[RGSCOMDNA]+" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_VARLIST,[procstat,&procuid,&procppid,procprog,&pos])
	AC_DEFINE_UNQUOTED(PS_RAW_COMMAND,"$PATH_TO_PS -Ao 's user ppid args'")
	EXTRAS="$EXTRAS check_nagios"
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS -Ao 's uid ppid comm args'")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%s %d %d %s %n")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS -Ao 'vsz comm'")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%d %s")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS -Ao 'rss comm'")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%d %s")
	echo "      ps syntax... $PATH_TO_PS -Ao 's comm vsz rss'"
elif [ps -Ao 'status comm vsz rss uid user ppid args' 2>/dev/null | egrep -i "^S[TAUES]* +C[OMDNA]+ +V[SIZE]+ +RSS +UID +USER +PPID +[RGSCOMDNA]+" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_VARLIST,[procstat,&procuid,&procppid,procprog,&pos])
	AC_DEFINE_UNQUOTED(PS_RAW_COMMAND,"$PATH_TO_PS -Ao 'status user ppid args'")
	EXTRAS="$EXTRAS check_nagios"
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS -Ao 'status uid ppid comm args'")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%s %d %d %s %n")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS -Ao 'vsz comm'")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%d %s")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS -Ao 'rss comm'")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%d %s")
	echo "      ps syntax... $PATH_TO_PS -Ao 'status comm vsz rss'"
elif [ps -Ao 'state comm vsz rss uid user ppid args' 2>/dev/null | egrep -i "^S[TAUES]* +C[OMDNA]+ +V[SIZE]+ +RSS +UID +USER +PPID +[RGSCOMDNA]+" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_VARLIST,[procstat,&procuid,&procppid,procprog,&pos])
	AC_DEFINE_UNQUOTED(PS_RAW_COMMAND,"$PATH_TO_PS -Ao 'state user ppid args'")
	EXTRAS="$EXTRAS check_nagios"
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS -Ao 'state uid ppid comm args'")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%s %d %d %s %n")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS -Ao 'vsz comm'")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%d %s")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS -Ao 'rss comm'")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%d %s")
	echo "      ps syntax... $PATH_TO_PS -Ao 'state comm vsz rss'"
dnl wonder who takes state instead of stat
elif [ps -ao 'state command vsz rss user ppid args' 2>/dev/null | egrep -i "^S[TAUES]* +C[OMDNA]+ +V[SIZE]+ +RSS +UID +USER +PPID +[RGSCOMDNA]+" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_VARLIST,[procstat,&procuid,&procppid,procprog,&pos])
	AC_DEFINE_UNQUOTED(PS_RAW_COMMAND,"$PATH_TO_PS -ao 'state user ppid args'")
	EXTRAS="$EXTRAS check_nagios"
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS -ao 'state uid ppid command args'")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%s %d %d %s %n")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS -ao 'vsz command'")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%d %s")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS -ao 'rss command'")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%d %s")
	echo "      ps syntax... $PATH_TO_PS -ao 'state command vsz rss'"
dnl FreeBSD
elif [ps waxco 'state command vsz rss uid user ppid' 2>/dev/null | egrep -i "^STAT +COMMAND +VSZ +RSS +UID +USER +PPID" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_VARLIST,[procstat,&procuid,&procppid,procprog,&pos])
	AC_DEFINE_UNQUOTED(PS_RAW_COMMAND,"$PATH_TO_PS waxo 'state uid ppid command'")
	EXTRAS="$EXTRAS check_nagios"
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS waxco 'state uid ppid command command'")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%s %d %d %s %n")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS waxco 'vsz command'")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%d %s")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS waxco 'rss command'")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%d %s")
	echo "      ps syntax... $PATH_TO_PS -Ao 'state command vsz rss'"
dnl BSD-like mode in RH 6.1
elif [ps waxno 'state comm vsz rss uid user ppid args' 2>/dev/null | egrep -i "^S +COMMAND +VSZ +RSS +UID +USER +PPID +[RGSCOMDNA]+" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_VARLIST,[procstat,&procuid,&procppid,procprog,&pos])
	AC_DEFINE_UNQUOTED(PS_RAW_COMMAND,"$PATH_TO_PS waxno 'state user ppid comm'")
	EXTRAS="$EXTRAS check_nagios"
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS waxno 'state uid ppid comm args'")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%s %d %d %s %n")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS waxno 'vsz comm'")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%d %s")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS waxno 'rss comm'")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%d %s")
	echo "      ps syntax... $PATH_TO_PS -waxco 'state comm vsz rss'"
dnl IRIX 53
elif [ps -el 2>/dev/null | egrep -i "^ *F +S +UID +PID +PPID +C +PRI +NI +P +SZ +RSS +WCHAN +TTY +TIME +[RGSCOMDNA]+" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_VARLIST,[procstat,&procuid,&procppid,&pos,procprog])
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS -el")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%*s %s %d %*s %d %*s %*s %*s %*s %*s %*s %*s %*s %*s %n%s")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS -el")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%*s %*s %*s %*s %d")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS -el")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %d")
	echo "      ps syntax... $PATH_TO_PS -el"
dnl IRIX 63
elif [ps -el 2>/dev/null | egrep -i "^ *F +S +UID +PID +PPID +C +PRI +NI +P +ADDR +SZ +RSS +WCHAN +TTY +TIME +[RGSCOMDNA]+" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_VARLIST,[procstat,&procuid,&procppid,&pos,procprog])
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS -el")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%*s %s %d %*s %d %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %n%s")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS -el")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%*s %*s %*s %*s %d")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS -el")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %d")
	echo "      ps syntax... $PATH_TO_PS -el"
dnl SunOS 4.1.3:
dnl  F  UID  PID  PPID  CP  PRI  NI  SZ  RSS  WCHAN  STAT  TT  TIME  COMMAND
dnl
elif [ps -laxnwww 2>/dev/null | egrep -i "^ *F(LAGS)? +UID +PID +PPID +CP +PRI +NI +(SZ)|(VSZ)|(SIZE) +RSS +WCHAN +STAT? +TTY? +TIME +COMMAND" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_RAW_COMMAND,"$PATH_TO_PS laxnwww")
	EXTRAS="$EXTRAS check_nagios"
	AC_DEFINE_UNQUOTED(PS_VARLIST,[&procuid,&procppid,procstat,&pos,procprog])
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS -laxnwww")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%*s %d %*s %d %*s %*s %*s %*s %*s %*s %s %*s %*s %n%s")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS laxnwww")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%*s %*s %*s %*s %*s %*s %*s %d")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS laxnwww")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%*s %*s %*s %*s %*s %*s %*s %*s %d")
	echo "      ps syntax... $PATH_TO_PS laxnwww"
dnl Debian Linux / procps v1.2.9:
dnl  FLAGS   UID   PID  PPID PRI  NI   SIZE   RSS WCHAN       STA TTY TIME COMMAND
dnl    100     0     1     0   0   0    776    76  c0131c8c   S  ffff  0:11 init [2]
dnl
elif [ps laxnwww 2>/dev/null | egrep -i "^ *F(LAGS)? +UID +PID +PPID +PRI +NI +(VSZ)|(SIZE) +RSS +WCHAN +STAT? TTY +TIME +COMMAND" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_RAW_COMMAND,"$PATH_TO_PS laxnwww")
	EXTRAS="$EXTRAS check_nagios"
	AC_DEFINE_UNQUOTED(PS_VARLIST,[&procuid,&procppid,procstat,&pos,procprog])
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS laxnwww")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%*s %d %*s %d %*s %*s %*s %*s %*s %s %*s %*s %n%s")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS laxnwww")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%*s %*s %*s %*s %*s %*s %d")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS laxnwww")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%*s %*s %*s %*s %*s %*s %*s %d")
	echo "      ps syntax... $PATH_TO_PS laxnwww"
dnl    
dnl AIX 4.1:
dnl     F S      UID   PID  PPID   C PRI NI ADDR  SZ  RSS   WCHAN    TTY  TIME CMD
dnl    303 A        0     0     0 120  16 -- 1c07  20   24              -  0:45 swapper
elif [ps -el 2>/dev/null | egrep -i "^ *F +S +UID +PID +PPID +C +PRI +NI +ADDR +SZ +WCHAN +TTY +TIME +[RGSCOMDNA]+" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_VARLIST,[procstat,&procuid,&procppid,&pos,procprog])
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS -el")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%*s %s %d %*s %d %*s %*s %*s %*s %*s %*s %*s %*s %n%s")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS -el")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%*s %*s %*s %*s %*s %*s %*s %*s %*s %d")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS -el")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%*s %*s %*s %*s %*s %*s %*s %*s %*s %d")
	echo "      ps syntax... $PATH_TO_PS -el"
dnl AIX?
elif [ps glaxen 2>/dev/null | egrep -i "^ *F +UID +PID +PPID +PRI +NI +VSZ +RSS +WCHAN +STAT +TTY +TIME +COMMAND" >/dev/null]
then
	AC_DEFINE(USE_PS_VARS)
	AC_DEFINE_UNQUOTED(PS_VARLIST,[&procuid,&procppid,procstat,&pos,procprog])
	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS glaxen")
	AC_DEFINE_UNQUOTED(PS_FORMAT,"%*s %d %*s %d %*s %*s %*s %*s %*s %s %*s %*s %n%s")
	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS glaxen")
	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%*s %*s %*s %*s %*s %*s %d")
	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS glaxen")
	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%*s %*s %*s %*s %*s %*s %*s %d")
	echo "      ps syntax... $PATH_TO_PS glaxen"
dnl ucb style?
dnl elif [ps axun 2>/dev/null | egrep -i "^USER +PID +%CPU +%MEM +SIZE +RSS +TTY +STAT +START +TIME +COMMAND *$" >/dev/null]
dnl then
dnl 	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS axun")
dnl 	AC_DEFINE_UNQUOTED(PS_FORMAT,"%s %d %*s %*s %*s %*s %*s %s %*s %*s %s")
dnl 	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS axun")
dnl 	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%*s %*s %*s %*s %d")
dnl 	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS axun")
dnl 	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%*s %*s %*s %*s %*s %d")
dnl 	echo "      ps syntax... $PATH_TO_PS axun"
dnl ucb style?
dnl elif [ps axun 2>/dev/null | egrep -i "^USER +PID +%CPU +%MEM +SIZE +RSS +TTY +STAT +START +TIME +COMMAND" >/dev/null]
dnl then
dnl 	AC_DEFINE_UNQUOTED(PS_COMMAND,"$PATH_TO_PS axun")
dnl 	AC_DEFINE_UNQUOTED(PS_FORMAT,"%s %d %*s %*s %*s %*s %*s %s %*s %*s %s")
dnl 	AC_DEFINE_UNQUOTED(VSZ_COMMAND,"$PATH_TO_PS axun")
dnl 	AC_DEFINE_UNQUOTED(VSZ_FORMAT,"%*s %*s %*s %*s %d")
dnl 	AC_DEFINE_UNQUOTED(RSS_COMMAND,"$PATH_TO_PS axun")
dnl 	AC_DEFINE_UNQUOTED(RSS_FORMAT,"%*s %*s %*s %*s %*s %d")
dnl 	echo "      ps syntax... $PATH_TO_PS axun"
else
	echo "** Unable to find usable ps syntax"
fi

AC_ARG_WITH(df_command,--with-df-command=<syntax> sets syntax for df,DF_COMMAND=$withval)
if test -n "$DF_COMMAND"
then
	AC_DEFINE_UNQUOTED(DF_COMMAND,"$DF_COMMAND")
elif [df -Pk 2>/dev/null | egrep -i "^(/dev/|[a-zA-Z]:)[a-z0-9/\\]+ +[0-9]+ +[0-9]+ +[0-9]+ +[0-9]+% +/[a-z0-9/\\]*" >/dev/null]
then
	AC_PATH_PROG(PATH_TO_DF,df)
	AC_MSG_RESULT("      df syntax... $PATH_TO_DF -Pk")
	AC_DEFINE_UNQUOTED(DF_COMMAND,"$PATH_TO_DF -Pk")
elif [df -k 2>/dev/null | egrep -i "^/dev/[a-z0-9/]+ +[0-9]+ +[0-9]+ +[0-9]+ +[0-9]+% +/[a-z0-9/]*" >/dev/null]
then
	AC_PATH_PROG(PATH_TO_DF,df)
	AC_MSG_RESULT("      df syntax... $PATH_TO_DF -k")
	AC_DEFINE_UNQUOTED(DF_COMMAND,"$PATH_TO_DF -k")
elif [df 2>/dev/null | egrep -i "^/dev/[a-z0-9/]+ +[0-9]+ +[0-9]+ +[0-9]+ +[0-9]+% +/[a-z0-9/]*" >/dev/null]
then
	AC_PATH_PROG(PATH_TO_DF,df)
	AC_MSG_RESULT("      df syntax... $PATH_TO_DF")
	AC_DEFINE_UNQUOTED(DF_COMMAND,"$PATH_TO_DF")
elif [bdf 2>/dev/null | egrep -i "^/dev/[a-z0-9/]+ +[0-9]+ +[0-9]+ +[0-9]+ +[0-9]+% +/[a-z0-9/]*" >/dev/null]
then
	AC_PATH_PROG(PATH_TO_DF,bdf)
	AC_MSG_RESULT("      df syntax... $PATH_TO_DF")
	AC_DEFINE_UNQUOTED(DF_COMMAND,"$PATH_TO_DF")
else
	AC_MSG_WARN("unable to find usable df syntax")
fi

AC_PATH_PROG(PATH_TO_PING,ping)

AC_ARG_WITH(ping_command,--with-ping-command=<syntax> sets syntax for ping,PING_COMMAND=$withval)
if test -n "$PING_COMMAND"
then
	echo "      ping syntax... (command-line) $PING_COMMAND"
	if test -n "$PING_PACKETS_FIRST"
	then
		AC_DEFINE_UNQUOTED(PING_PACKETS_FIRST,"$PING_COMMAND")
	fi
elif [ping -n -U -c 1 127.0.0.1 2>/dev/null | egrep -i "^round-trip|^rtt" >/dev/null]
then
        PING_COMMAND="$PATH_TO_PING -n -U -c %d %s"
        AC_DEFINE_UNQUOTED(PING_PACKETS_FIRST,"$PING_COMMAND")
        echo "      ping syntax... $PATH_TO_PING -n -U -c <count> <host>"
elif [ping -n -c 1 127.0.0.1 2>/dev/null | egrep -i "^round-trip|^rtt" >/dev/null]
then
	PING_COMMAND="$PATH_TO_PING -n -c %d %s"
	AC_DEFINE_UNQUOTED(PING_PACKETS_FIRST,"$PING_COMMAND")
	echo "      ping syntax... $PATH_TO_PING -n -c <count> <host>"
elif [ping -n 127.0.0.1 -c 1 2>/dev/null | egrep -i "^round-trip|^rtt" >/dev/null]
then
	PING_COMMAND="$PATH_TO_PING -n %s -c %d"
	echo "      ping syntax... $PATH_TO_PING -n <host> -c <count>"
elif [ping 127.0.0.1 -n 1 2>/dev/null | egrep -i "^round-trip|^rtt" >/dev/null]
then
	PING_COMMAND="$PATH_TO_PING %s -n %d"
	echo "      ping syntax... $PATH_TO_PING <host> -n <count>"
elif [ping -n -s 127.0.0.1 56 1 2>/dev/null | egrep -i "^round-trip|^rtt" >/dev/null]
then
	PING_COMMAND="$PATH_TO_PING -n -s %s 56 %d"
	echo "      ping syntax... $PATH_TO_PING -n -s <host> 56 <count>"
elif [ping -n -h 127.0.0.1 -s 56 -c 1 2>/dev/null | egrep -i "^round-trip|^rtt" >/dev/null]
then
	PING_COMMAND="$PATH_TO_PING -n -h %s -s 56 -c %d"
	echo "      ping syntax... $PATH_TO_PING -n -h <host> -s 56 -c <count>"
elif [ping -n -s 56 -c 1 127.0.0.1 2>/dev/null | egrep -i "^round-trip|^rtt" >/dev/null]
then
	PING_COMMAND="$PATH_TO_PING -n -s 56 -c %d %s"
	AC_DEFINE_UNQUOTED(PING_PACKETS_FIRST,"$PING_COMMAND")
	echo "      ping syntax... $PATH_TO_PING -n -s 56 -c <count> <host>"
elif [ping -n -c 1 127.0.0.1 2>/dev/null | egrep -i "^round-trip|^rtt" >/dev/null]
then
	PING_COMMAND="$PATH_TO_PING -n -c %d %s"
	AC_DEFINE_UNQUOTED(PING_PACKETS_FIRST,"$PING_COMMAND")
	echo "      ping syntax... $PATH_TO_PING -n -c <count> <host>"
else
	AC_MSG_WARN("unable to find usable ping syntax")
fi
AC_DEFINE_UNQUOTED(PING_COMMAND,"$PING_COMMAND")

AC_PATH_PROG(PATH_TO_NSLOOKUP,nslookup)
if test -n "$ac_cv_path_PATH_TO_NSLOOKUP"
then
	AC_MSG_CHECKING("nslookup syntax")
	if [nslookup -sil 127.0.0.1 2>&1 | grep "*** Invalid option: sil" >/dev/null]
	then
		AC_MSG_RESULT("$PATH_TO_NSLOOKUP")
		AC_DEFINE_UNQUOTED(NSLOOKUP_COMMAND,"$PATH_TO_NSLOOKUP")
	else
		AC_MSG_RESULT("$PATH_TO_NSLOOKUP -sil")
		AC_DEFINE_UNQUOTED(NSLOOKUP_COMMAND,"$PATH_TO_NSLOOKUP -sil")
	fi
	EXTRAS="$EXTRAS check_dns"
else
	AC_MSG_WARN("nslookup command not found")
fi

AC_PATH_PROG(PATH_TO_HOST,host)
if test -n "$ac_cv_path_PATH_TO_HOST"
then
	AC_MSG_CHECKING("host syntax")
	if [host 127.0.0.1 2>&1 | grep -v "ommand not found" > /dev/null]
	then
		AC_MSG_RESULT("$PATH_TO_HOST")
		AC_DEFINE_UNQUOTED(HOST_COMMAND,"$PATH_TO_HOST")
	fi
	EXTRAS="$EXTRAS check_dns"
else	
	AC_MSG_WARN("host command not found")
fi

AC_PATH_PROG(PATH_TO_UPTIME,uptime)
AC_DEFINE_UNQUOTED(PATH_TO_UPTIME,"$PATH_TO_UPTIME")

AC_PATH_PROG(PATH_TO_RPCINFO,rpcinfo)
AC_DEFINE_UNQUOTED(PATH_TO_RPCINFO,"$PATH_TO_RPCINFO")

AC_PATH_PROG(PATH_TO_NTPDATE,ntpdate)
AC_PATH_PROGS(PATH_TO_NTPDC,ntpdc xntpdc)
if (test -x "$PATH_TO_NTPDATE" || test -x "$PATH_TO_NTPDC")
then
	AC_DEFINE_UNQUOTED(PATH_TO_NTPDC,"$PATH_TO_NTPDC")
	AC_DEFINE_UNQUOTED(PATH_TO_NTPDATE,"$PATH_TO_NTPDATE")
else
	echo "** Install NTP programs (http://www.ntp.org) if you want to monitor time synchronization"
fi

AC_PATH_PROG(PATH_TO_LMSTAT,lmstat)
if test -x "$PATH_TO_LMSTAT"
then
	AC_DEFINE_UNQUOTED(PATH_TO_LMSTAT,"$PATH_TO_LMSTAT")
else
	echo "** Get lmstat from Globetrotter Software to monitor flexlm licenses"
fi

AC_PATH_PROG(PATH_TO_SMBCLIENT,smbclient)
if test -x "$PATH_TO_SMBCLIENT"
then
	AC_DEFINE_UNQUOTED(PATH_TO_SMBCLIENT,"$PATH_TO_SMBCLIENT")
else
	echo "** Get smbclient from Samba.org to monitor SMB shares"
fi


AC_PATH_PROG(PATH_TO_WHO,who)
if [who -q 2>/dev/null | egrep -i "^# users=[0-9]+$" >/dev/null]
then
	AC_DEFINE_UNQUOTED(WHO_COMMAND,"$PATH_TO_WHO -q")
else
	AC_DEFINE_UNQUOTED(WHO_COMMAND,"$PATH_TO_WHO")
fi

AC_PATH_PROG(PATH_TO_SNMPGET,snmpget)
if test -x "$PATH_TO_SNMPGET"
then
	AC_DEFINE_UNQUOTED(PATH_TO_SNMPGET,"$PATH_TO_SNMPGET")
	EXTRAS="$EXTRAS check_hpjd check_snmp"
else
	echo "** Get snmpget from http://net-snmp.sourceforge.net to make check_hpjd and check_snmp plugins"
fi

AC_PATH_PROG(PATH_TO_SNMPGETNEXT,snmpgetnext)
if test -x "$PATH_TO_SNMPGETNEXT"
then
	AC_DEFINE_UNQUOTED(PATH_TO_SNMPGETNEXT,"$PATH_TO_SNMPGETNEXT")
fi

if ( $PERL -M"Net::SNMP 3.6" -e 'exit' 2>/dev/null  )
then
	echo "Found Net::SNMP perl module"
else
	echo "** Tried $PERL - install Net::SNMP perl module if you want to"
	echo "        use the perl snmp plugins"
fi

AC_PATH_PROG(PATH_TO_QUAKESTAT,quakestat)
AC_PATH_PROG(PATH_TO_QSTAT,qstat)
if test -x "$PATH_TO_QUAKESTAT"
then
	AC_DEFINE_UNQUOTED(PATH_TO_QSTAT,"$PATH_TO_QUAKESTAT")
	EXTRAS="$EXTRAS check_game"
elif test -x "$PATH_TO_QSTAT"
then
	AC_DEFINE_UNQUOTED(PATH_TO_QSTAT,"$PATH_TO_QSTAT")
	EXTRAS="$EXTRAS check_game"
else
	echo "** Get qstat from http://www.activesw.com/people/steve/qstat.html in order to make check_game plugin"
fi

AC_PATH_PROG(PATH_TO_FPING,fping)
if test -x "$PATH_TO_FPING"
then
	AC_DEFINE_UNQUOTED(PATH_TO_FPING,"$PATH_TO_FPING")
	EXTRAS="$EXTRAS check_fping"
else
	echo "** Get fping from http://www.fping.com in order to make check_fping plugin"
fi

AC_PATH_PROG(PATH_TO_SSH,ssh)
if test -x "$PATH_TO_SSH"
then
	AC_DEFINE_UNQUOTED(SSH_COMMAND,"$PATH_TO_SSH")
	EXTRAS="$EXTRAS check_by_ssh"
else
	echo "** Get ssh in order to make check_by_ssh plugin"
fi

dnl dunno why this does not work below - use hack (kbd)
dnl fine on linux, broken on solaris
dnl if /bin/test -e "/proc/meminfo"

if [cat /proc/meminfo > /dev/null 2>&1]
then
	echo "found /proc/meminfo"
	AC_DEFINE(HAVE_PROC_MEMINFO)
	AC_DEFINE_UNQUOTED(PROC_MEMINFO,"/proc/meminfo")
	EXTRAS="$EXTRAS check_swap"
elif [swap -l 2>&1 | egrep -i "swapfile" >/dev/null]
then
	echo "found swap command"
	AC_DEFINE(HAVE_SWAP)
	AC_PATH_PROG(PATH_TO_SWAP,swap)
	AC_DEFINE_UNQUOTED(SWAP_COMMAND,"$PATH_TO_SWAP -l")
	if [swap -l 2>/dev/null | egrep -i "^lswap +path +pri +swaplo +blocks +free +maxswap" >/dev/null]
	then
		AC_DEFINE_UNQUOTED(SWAP_FORMAT,[" %*d %*s %*d,%*d %*d %*d %d %d"])
		echo "      using IRIX format"
	elif [swap -l 2>/dev/null | egrep -i "^swapfile +dev +swaplo +blocks +free" >/dev/null]
	then
		AC_DEFINE_UNQUOTED(SWAP_FORMAT,["%*s %*[[0-9,-]] %*d %d %d"])
		echo "      using Solaris format"
	fi
	EXTRAS="$EXTRAS check_swap"
elif [swapinfo -k 2>&1 | egrep -i "Device" >/dev/null]
then
	echo "found swapinfo command"
	AC_DEFINE(HAVE_SWAP)
	AC_PATH_PROG(PATH_TO_SWAP,swapinfo)
	AC_DEFINE_UNQUOTED(SWAP_COMMAND,"$PATH_TO_SWAP -k")
	if [swapinfo -k 2>/dev/null | egrep -i "^Device +1K-blocks +Used +Avail" >/dev/null]
	then
		AC_DEFINE_UNQUOTED(SWAP_FORMAT,["%*s %d %*d %d"])
		echo "      using FreeBSD format"
	fi
	EXTRAS="$EXTRAS check_swap"
fi

AC_PATH_PROG(PATH_TO_DIG,dig)
AC_DEFINE_UNQUOTED(PATH_TO_DIG,"$PATH_TO_DIG")
if test -n "$PATH_TO_DIG"; then
	EXTRAS="$EXTRAS check_dig"
fi

if test -f plugins/check_nt.c ; then
  EXTRAS="$EXTRAS check_nt"
elif test -f ../plugins/check_nt.c ; then
  EXTRAS="$EXTRAS check_nt"
fi

dnl AC_EGREP_HEADER (PATTERN, HEADER-FILE, ACTION-IF-FOUND [,          ACTION-IF-NOT-FOUND])
AC_TRY_COMPILE([#ifdef __STDC__
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#else
#include <sys/types.h>
#include <stdio.h>
#include <varargs.h>
#endif],
[va_list args;],
[AC_MSG_RESULT(yes)],
[NEED_VA_LIST=-DNEED_VA_LIST AC_SUBST(NEED_VA_LIST) AC_MSG_RESULT(no)])

AC_SUBST(EXTRAS)
AC_SUBST(DEPLIBS)

AC_DEFINE_UNQUOTED(PACKAGE_VERSION,"${VERSION}")

AC_OUTPUT(Makefile subst plugins/Makefile plugins-scripts/Makefile plugins-scripts/subst plugins-scripts/utils.pm plugins-scripts/utils.sh command.cfg test.pl,echo timestamp > plugins/stamp-h1;echo timestamp > plugins/stamp-h2;echo timestamp > plugins/stamp-h3;echo timestamp > plugins/stamp-h4;echo timestamp > plugins/stamp-h5;echo timestamp > plugins/stamp-h6;PATH=.:..:$PATH subst.sh command.cfg)
